[{"id":"/sicpjs/4.1.5","tag":"TITLE","body":"4.1.5  \n    Data as Programs"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In thinking about a\n    JavaScript\n    program that evaluates\n    JavaScript statements and\n    expressions, an analogy might be helpful.  One operational view of the\n    meaning of a program is that a \n    \n    program is a description of an abstract (perhaps infinitely large) machine.\n    For example, consider the familiar program to compute factorials:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0FYBQuAzAVwDsBjAFwEsB7E0AgQ0poCcrGAbAChIEpQAb1yhRoVgFMKRVvXoBeRaAwixasQH5lq9WoBcDZhTYce9ALTKBAKlAkA3LgC++Ji3Zdu2PvaA","body":"function factorial(n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n} "},{"body":"\n    We may regard this program as the description of a\n    \n    machine containing\n    parts that decrement, multiply, and test for equality, together with a\n    two-position switch and another factorial machine. (The factorial\n    machine is infinite because it contains another factorial machine\n    within it.)  Figure ","tag":"#text"},{"tag":"REF","body":"4.3","href":"/sicpjs/4.1.5#fig-4.3"},{"body":" is a flow\n    diagram for the factorial machine, showing how the parts are wired together.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"90%","src":"img_original/ch4-Z-G-2.svg","id":"#fig-4.3","captionHref":"/sicpjs/4.1.5#fig-4.3","captionName":"Figure 4.3 ","captionBody":[{"body":"The factorial program, viewed as an abstract machine.\n      ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In a similar way, we can regard the evaluator as a very special\n    \n    machine that takes as input a description of a machine.  Given this\n    input, the evaluator configures itself to emulate the machine\n    described.  For example, if we feed our evaluator the definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":", as shown in\n    figure ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.1.5#fig-4.4"},{"body":",\n    the evaluator will be able to compute factorials.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch4-Z-G-3.svg","id":"#fig-4.4","captionHref":"/sicpjs/4.1.5#fig-4.4","captionName":"Figure 4.4 ","captionBody":[{"body":"The evaluator emulating a factorial machine.\n          ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    From this perspective, our evaluator is seen to be a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"universal machine","tag":"#text"}]},{"body":".\n    It mimics other machines when these are described as \n    JavaScript \n    programs.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.1.5#footnote-1"},{"body":"\n    This is striking. Try to imagine an analogous evaluator for electrical\n    circuits.  This would be a circuit that takes as input a signal encoding the\n    plans for some other circuit, such as a filter.  Given this input, the\n    circuit evaluator would then behave like a filter with the same description.\n    Such a universal electrical circuit is almost unimaginably complex.  It is\n    remarkable that the program evaluator is a rather simple\n    program.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.1.5#footnote-2"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Another striking aspect of the evaluator is that it acts as a bridge between\n    the data objects that are manipulated by our programming language and the\n    programming language itself.  Imagine that the evaluator program\n    (implemented in JavaScript)\n    is running, and that a user is typing\n    programs\n    to the evaluator and\n    observing the results. From the perspective of the user, an input\n    program\n    such as \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x * x;"},{"body":"\n    is\n    a program\n    in the programming language, which the evaluator should\n    execute.\n    \n\tFrom the perspective of the evaluator, however, the program is simply\n\ta string or—after parsing—a tagged-list representation\n\tthat is to be manipulated according to a well-defined set of rules.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tThat the\n\t\n\tuser's programs are the evaluator's data need not\n\tbe a source of confusion.  In fact, it is sometimes convenient to ignore\n\tthis distinction, and to give the user the ability to explicitly\n\tevaluate a string as a JavaScript statement, using JavaScript's\n\tprimitive function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":"\n\tthat takes as argument a string. It parses the string\n\tand—provided that it syntactically correct—evaluates the\n\tresulting representation in the environment in which\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":" is applied. Thus,\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0FYBQuBTANwEMAbACgCJtQAqUbAbioEomg","body":"eval(\"5 * 5;\"); "},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":461,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0FYBQuRQAzAVwDsBjAFwEsB7MgZ2ICc6BbCGeJVTTfKUq0GoAKYA3AIYAbElKpiAFBQ4AHBmLJUANOLISAlKADeuUBdAsxVEizKgajAPoyailrJXrN2w+ctAywB+UDcPWWdpOWVVdg0yLSp-INSALkcXMil2WJ9EvwDUkLC6OgBrEjVnRgBPdgAjOhko2RJlOsbm5zoiZ2zc73jfZL0tIyLi0AynZyk1NTcKBXoyIYSklKmLUPnF2qVJNoVlIWpV5zEADzVrRkZV9ZHDMYMXye3Ut0YqHr7o9qMJRSFgAc0uNzuDwYQLiGz8ryMW22MxcdDUYk8VDoLGccQaNGyIjWcOeH1SoSOchOSnRmIUOLxHAJRIu2LmCyWKwYTwKo3Jn1S42RU1RTLIABN3KsvKS+SLipTouKpcTZfkkoiFelMq4cg0JVIIbcxPdHnLNgLAqF2FJymJnGdiUoZPrDc41CCcjZMTV6k0ZLCNQirYKpq7Gu6mhKDhaEfoJoKxYwxABHdqUPLDeWhnbiZUp9NaCgdNMZks1KgnXLaIPZzZa3PTXUNGR0CjlXmWwVKyKt9uduO6BPaoJi6y2eyV6tJLuFHv5yITuxkaeKGtUOfD4VNsVOi4SsQUV1Y83B5JN3vUxRKfcMZyH4-OdmqJhV7QPo8yLcvEe73WPie3Ikueo7WouLSAV6zpDo2Sa6lIZqgmQG4-peEFzEhKGzrBf7wZibAsFuegAETkOUZB0AA7g4dTaFIVygAAtExEHyIoJGGAA3LgAC+gjkOcoh7DIBxCHoIKgowxhmIENBEKASizLcNDsNKEgOneaxCIYMlWsu9igCJtQeiwqnqZpgnOuJRlgtJPGBLx4iBmIjgKUpLikuQEqOlZjw6XpUyvj8VimiQMhUKAAC8bE0lpzjRmJ5DvGGqXFNciiSpcBg0Gw2HaEoTZpYK8Wep4uQeECOk6EVxXbJJjA1XVzWWPF4y5QwqEBdx+k2CuuoGauALKHc4UXsVoSDa0MTiplm6jRFYHFBk3liEQhJiBKDmWE5YguaYVoETit7kKR5GUTRxB+aIVC1BizGscZnHbRY-H8bgWlhE4vy9NNgKHDcjUjgdgSDaAtpqMCYLRQAfLFN6SVqYyAz172fVSKrSgw6r1toWog5YYOzFQLAkFQAAWBxUuxeSSlj2QtCaUrLDeQ6-sKS15tTNKvqqMotMFZY4aBcGfBk3OswwfPYy0sgeKyGk-lqPFo9dDgY4W5YdFQ7BUEDwoExY8mKbMYjxLdNRC5mSg-Lr0mBcUYOretiRbZMu37cbHl6j8a5m7Ott67phtBGDEunLlvs-DOBWB9Jyvu85KYh4EwWRetLBRzrvzDdFoBFeHt6R780frgH2fxyOL1BF7sxTcNReZyX2d-WIweyYKYMZ1nuut9XjlJ65HefGHBZWyWSh3M3Md6zbFfs28-c7e7fECcIqygIwyyrnQZOfse0GrHW8LJCHRMuJrxZZifnOgLsFAUCQ7DhTSexaBKTUtUEZDhTIn9f5YCGNtt49D3lBU8MJ-4AKCJfTMfsNzH2eLpf8sxwHATQgub4m40HEj9F0b8bNb4ZB-jIGQKs15CXVsqfsHZiLA2HqANOoBEp5xoeUBKdAYw-mrkwtsyxAx5y3lIHeYCvyHxhEoRKPVU4wkiuQRCDxkKbWYDFLBfxnDyKwptF07ZZD2UmKPY4N5ErI0yj5dqeVUJ8L0VA6BADNGKNdkDWqdjPgc3IZ9NRv0HE0CURKG2-pmjSTPn1QyQDOgBlhqAEiAAqHxfiYkkT0BEoJqMKHEgwlNUu-sCq4QNgwsGtp7TOHrm0ZQhcprXBNGaHkbNbGuLcW8NJH01YYQUb4-Km48lvBDkw3OMVC7tOQhuVuxooRnlxvyBplhhTVyGauFJLQG7zJGYspWoBhoJ1BqEhww1yEtPXqIDGOCJkn3xgw+ZeCAyt0KlME5941l1PzlMQu9yhplLGaaaEIFJkLyMPUiwsyAhO0lGtDabt3qEC0swIgbBOBQDgIgZA6AsAACZ0kb2JlIUEoJNquG+nQimDoqyggdhYc+HopC5R-KAAAZLS0A5MxBSH8WzaKUUYpEufNi-Zn1ZjhHpAQ0CITJwOCxTivFWC6EkQFZ4GQz1V6ePcIKm5bKTCBAMTsxlzL-FVhoEK35zTPpFIdLKrww0yWhVFV9H4SgZXKrlUkjZZSjWtNmAMa+zwRX9XFbinyUrcIkQ9Qq1WhyHAmv6N6AJ+DLVgylUG70TrFmurDZvQJLRfoeppQUrVTKWVKD1Qam+KbKEISwqhNVmrrW+slQSwNKykghoOaWhtH5HnCpzdavNuqqXfm7QW3tP5dJpM+q2nOHyqnjNqR2qt-V+2FoHfqodJaMmoLERAn5N9vWGRrf6ut55SJp2Eb8N5nFQAAB9z1Nl3fi21gbpBmSkK2B0p7jCXuvS4Elfrb1dIPdE+Kr7eWtLeVc5o2bZ2GUWeorN87B2EJHcB9dwFRmTq+acr1na506sXd+Bd8GgOpojUej8bylAer0MNT5NSyCxq1fG4jJ6kPEideR51M1UPUZXZilwEYDRGg4988D2zq2fuxd+gNf6ZVun45CNDDAm2eOk5S8qPpcSLMQfKbd4b5jRuuZm70ehYNLvw4q1pvGoycNjDO4TWH80Lrw6BXSBHS0RvMzJ6pgmyrekqnoKRWmbWbik5GdzU6yBOq8xVTEQMpHOdXS4ADTH0OaZMAASA1TZndomJV7rvZJhLB8N0KdafloCuCs2Voyw4NR1giB0IwAh1NJXxGrgi6pjTmx-PVbWnQ1FDXS1NY3RwrhFXCZ0e+iU7ruEADMfWMklefHQcU0cSNfiE6N61RHZHHv3qVx4Lirphp281yNgw6n7dc0pgTe2v4DeQ61yqSt9uBFu7gxKy7YvcYm6K+BwtfmGwpV+2tuXJmkSyVWMu2giupsqbJ6ja2rW2Z7cZxzH3RCzF5vTHGW7MOZe5dln90qMdqhaFd+Tb6r2ChvRJkH0Sif8x+5D2bG86cy1MptGgLNPXJaKHG8bNW6tM9ECzhmS2ra-r+8PXnvt+e4V6x41pwvIhy0xArLnHXJdjel5Nv9M3UdiovuPbWusyUA7E0DzcgdSKwJLFD0t1uHTZIQXPY3phLA89zdhhdgcnOmca8XBnFv57-Y9-muOguHBTwD0CMPwfrVe-nvL1NptzYmXt87oOsefVZF-un-R-E+U8cQtPCHge7Ym61e6nP8ey9cbRy4Nh8OEe48Bzl8XZzolsNtxkthQ2rMS4gw4IzRakGJ5c3aB0DfHfq4HwFu1nfkng5yckPXuo6RYkZPiQk6C1Vpbd5V3U8iWAmTXwyXEm-WTTr+++yn9et9H56BidfZ-mRb5gqBUfcWNHZHvyf7Ez-Giv5Jbq674WAz5U77o05kTf7H6P6n5MgAEX5hbh4th34wH0h-7wEsjb4dogHPLrZZ547iYQHt4kRYE-6wEYHn7ARd4by-6Mjtr9775da1a4T1Yf4bzdw-SwGSiN5S6-Ay5-py6+525HhSwP70g8Ejbkqa78Ha40666rzNoZIRoiQc7oJtSw7fISRghPxJBUbfLBI45VYEokSqEsyrBJJPYaEearDaGgi6Efik5MC14OB0H-5YG4LshmHYGMGWBMJuF5xuGgbD7yjVwUqH5oFP6YGAGX43zoQqGchqHOgRpZpuEpTTKBBSqcHiGeCSGOZELgzj4ciLBJGPApFRppEAquJZH+4n55G-JVEZGbyiFZR1Gsr5Er6zDeFv6+FN766EHm7SrdEWHIHWGhbw5gxD5DrsHCRgj6FHwTEh5I64ZwYdGKFQpqwwpwpcCIq8AopoBTYYp17PikwUwHBXC0YiYcLNDMprAXF4HbChBXD-hHRERXCkRNA3HCLiA3BHiKAfyhQlg0AaQSg0HHFEB6LnEyR9GgAACEuoJMZMlMSgFxXEoAoaY+xSWkSg92UWvmlm5yM+9GPg3kvkYa4WXokWmc+JMYCc+ebqnkJJWU2JRAlxBBLeBORAh6TJPkWkYJDgpUlJbWt40JfBE2tWXJoAbB6JRxApasveIpruYp-OkpcuMpShHB8pFinUs4rJSpMh4pt4eguu6pxqRRpSMQ3g2g0+TBJhFp7QTqr4c0yBdcOyNyFq-m4Btqmy0S9pYg-JfRoyTps4HpRh2qdmg6FqLh+gx4dADwZA4I2pnShwPS6qYMC6syppxW-usKUa+SMJ-amZ70TCXKZsagFsSZG4ecJCZCsphRWJKmumQSFGZShhMJno1K6mLZMQ9kWZjWKmwRVUKmopSxt4w5aJGJc2A5w0Q53oI5ceg6uZuQ3EfZpaGU782UEgHUyZXZbG0WiEDo+SRJWgoIFMTZgYxgHKqiJ5Z50Q0k6EHZREEaS5HQ6aQMd5v4DQB5m5BRMgN55M55wSAAPGEP+UoB+ehK8XatiHQIUWQLULZPYQgpvFUCUZtBkCRKAAANQPF1Q-BmQJnyQHDqbGA4VOqYU4VPaWD4WEighEXgV6LIL4QsCETQVlDEBiBUSIUOF6woWJHoXRLYW4XFQ0WEVEDEVvmkXRKkRCVUUWCiV0XiUMUXnRltgVBVDBE3KLKEnPatLjCuBlCQxHlTCfRCJrC7kfkpyOwV7Z6kKAW3xTCUgGAGXogpmxnxmJk5SWKzgcxyXNiLLsoxT9okV+WhD9oQVfwZBmU4b2V6ALofnSLFD8RTBezjCBWgClkp6bnbkbiWovIsXHTaXRLkBNDeSgDBqJWpAezJwMJBSyKsDeh5zZEvkplGBLypBgzRUvmDljlzl6DdUzm9XLmVVBDJXLz776VqVGWLyKGjpYSaUNxFXRA6WtR6XOVTWtV5WrWprRUWWMVWUdU2X9A54hVfxOUSAuXTXuW0XZXeUFS+WRVpr4LpXBWSWhXNG-DhU2JsYOXLSbzbwxUkVxWRmMUjUDxWipUGDpWZXlkmSVk2mChQVFVQGlWSjlWNUsRGTlqNpg07SDwHVBBMIvlNU5mNlAphidUA3dXqZDVtz9XTmtm00+5TBjWvQz6TWGWbX7IbFhpbEcA7E8DIr8AoB1nKRmRqS0AaRkmUInQ0aelZZEG2o2QkQqQS3An+nRmq0WTOCqSLBL7qHJT6ldqe6LnJQrnFn1Va2S2WS815xSoCjxrdpOqWDdqpTpFBDxqFrO0WCFpu0ArxqPne2gCPl+0O0mFYJB1YKh3FDxqV6kJOpx0yCfDu2ZEmFSiMCLBSC1BOrp2Z0IXbAp2WDxqvHe2vFhiF0WDxq2gUxzANCMBJLV3ky13MBTAV2z4kRYVB2WAol6C1CXlwyMQ4X51t3xpMRd0WA92gB91RKMSsTD3+0mFMQRHe2MSBBRRwwWCsSr0j0mGJJ6CpCT3T3r2gCMQxJT0WA722okTADj2KTvFT390n2gBgDz1h1X0ACkt9h9j9jE7959oAl9gWV5Xd39M96VfdC9V9sJHKID99R9A9cJHKD9kDgWQFX9cDP9oAIFFgEDb9qDUU49oDx9jEQFMUyDeDdqMM6DvdmDG95DMdJhMMBD+9gQRDCDTDODgDdqsJt9T9a9dD8JFgFxAoPUTCVt6t0tuC6m0UkwQC3aeg4jUt0Kojlt4t2t8UdADQAAVn8SorIzpkIFEgHWo9bU6lMd1FUYozbZQvorgGIyYxIwxiorPvGs7OCk6m467G3RkfGpAGQC7O4NnfvX4wE7dN49MlXQoE3bAJAN7Y3c4DE+Ew0pEzXQAKJB3xOpNJPVEmEAByUguTt9+TuTv1X8Kjb4wdDjUtDGg5MjgQQCFAUS-aFAv4VjS274QcPE9j5k1t7T22M5dTgCOmjTx9UxLTrTVTDoTjPUGpwknIJkbTLJp0iFWCbJhkxkOtq4q0LAokN1WjUg0gW8Zk5ZtyaUbTutf5G4BtNGdhqzK+KYtg1Q8NBUaz6sVwZit1OpBUb8PBiz8pXZflLUbTNTQNgLnwPz-ifzh2mjOj1AziTRnwwLW2H4M52TX8MNFZXlXzy+ihJZTKzgoIbYX5JOWLnSgifUTzpLqEMzhcZUKYdq2AoAZ92AXEnEcV+LhLmjkQzzy+QAA","body":"evaluate(parse(\"5 * 5;\"), the_global_environment); "},{"body":"\n\twill both return 25.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.1.5#footnote-3"}]},{"tag":"EXERCISE","title":"Exercise 4.15","id":"#ex-4.15","child":[{"body":"\n    Given a one-argument\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    and an object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    is said to \"halt\" on\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" if evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f(a)"},{"body":"\n    returns a value (as opposed to terminating with an error message or running\n    forever).\n    \n    Show that it is impossible to write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    that correctly determines whether\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    halts on\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" for any\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    and object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":".\n    Use the following reasoning: If you had such a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":",\n    you could implement the following program:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function run_forever() { return run_forever(); }\n\t\nfunction strange(f) {\n    return halts(f, f)\n           ? run_forever();\n           : \"halted\";\n}"},{"body":"\n    Now consider evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"strange(strange)"},{"body":"\n    and show that any possible outcome (either halting or running forever)\n    violates the intended behavior of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.1.5#footnote-4"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.1.5#footnote-link-1","child":[{"body":"The fact that the machines are described in \n    JavaScript \n    is inessential.  If we give our evaluator a \n    JavaScript \n    program that behaves as an evaluator for some other language, say C, the \n    JavaScript \n    evaluator will emulate the C evaluator, which in turn can emulate any\n    machine described as a C program.  Similarly, writing a \n    JavaScript \n    evaluator in C produces a C program that can execute any \n    JavaScript \n    program.  The deep idea here is that any evaluator can emulate any other.\n    Thus, the notion of \"what can in principle be computed\"\n    (ignoring practicalities of time and memory required) is independent of the\n    language or the computer, and instead reflects an underlying notion of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"computability","tag":"#text"}]},{"body":".  This was first demonstrated in a clear way by \n    \n    Alan M. Turing (1912–1954), whose 1936 paper laid the foundations\n    for theoretical \n    \n    computer science.  In the paper, Turing presented a simple computational\n    model—now known as a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Turing machine","tag":"#text"}]},{"body":"—and argued that any \"effective\n    process\" can be formulated as a program for such a machine.  (This\n    argument is known as the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Church–Turing thesis","tag":"#text"}]},{"body":".) Turing then implemented a universal machine,\n    i.e., a Turing machine that behaves as an evaluator for Turing-machine\n    programs.  He used this framework to demonstrate that there are well-posed\n    problems that cannot be computed by Turing machines (see\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.15","href":"/sicpjs/4.1.5#ex-4.15"},{"body":"), and so by implication\n    cannot be formulated as \"effective processes.\"  Turing went on\n    to make fundamental contributions to practical computer science as well.\n    For example, he invented the idea of \n    \n    structuring programs using general-purpose subroutines.  See \n    Hodges 1983 for a biography of Turing.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.1.5#footnote-link-2","child":[{"body":"Some people find it counterintuitive that an evaluator,\n    which is implemented by a relatively simple\n    function,\n    can emulate programs that are more complex than the evaluator itself.  The\n    existence of a universal evaluator machine is a deep and wonderful property\n    of computation.\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Recursion theory","tag":"#text"}]},{"body":", a branch of mathematical logic, is concerned with\n    logical limits of computation.  \n    \n    Douglas Hofstadter's beautiful book ","tag":"#text"},{"tag":"EM","child":[{"body":"Gödel, Escher,\n    Bach","tag":"#text"}]},{"body":" (1979) explores some of these ideas.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.1.5#footnote-link-3","child":[{"body":"Note that\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":"\n\tmay not be available in the JavaScript environment that you are\n\tusing, or its use may be restricted for security reasons.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.1.5#footnote-link-4","child":[{"body":"Although\n    we stipulated that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    is given a\n    function\n    object, notice that this reasoning still applies even if\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    can gain access to the\n    function's\n    text and its environment.\n    \n    This is Turing's celebrated\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Halting Theorem","tag":"#text"}]},{"body":", which gave the\n    first clear example of a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"noncomputable","tag":"#text"}]},{"body":" problem, i.e., a well-posed\n    task that cannot be carried out as a computational\n    function.","tag":"#text"}]}]