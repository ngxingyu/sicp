[{"id":"/sicpjs/5.5.7","tag":"TITLE","body":"5.5.7  \n    Interfacing Compiled Code to the Evaluator"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We have not yet explained how to load compiled code into the evaluator\n    machine or how to run it.  We will assume that the explicit-control-evaluator\n    machine has been defined as in\n    section ","tag":"#text"},{"tag":"REF","body":"5.4.4","href":"/sicpjs/5.4.4"},{"body":", with the additional\n    operations specified in footnote ","tag":"#text"},{"tag":"REF","body":3,"href":"/sicpjs/5.5.2#footnote-3"},{"body":" (section ","tag":"#text"},{"tag":"REF","body":"5.5.2","href":"/sicpjs/5.5.2"},{"body":").\n    We will implement a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_go"},{"body":"\n    that compiles a\n    JavaScript program,\n    loads the resulting object code into the evaluator machine,\n    and causes the machine to run the code in the\n    evaluator global environment, print the result, and\n    enter the evaluator's driver loop.  We will also modify the evaluator\n    so that interpreted\n    \n\tcomponents\n      \n    can call compiled\n    functions\n    as well as interpreted ones.  We can then put a compiled\n    function\n    into the machine and use the\n    evaluator to call it:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":1722,"program":"chap=4&prgrm=","body":"compile_and_go(parse(`\nfunction factorial(n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n}\n                     `)); ","output":"EC-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"factorial(5);","output":"EC-evaluate value:\n120"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    To allow the evaluator to handle compiled\n    functions\n    (for example,\n    to evaluate the call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":" above),\n    we need to change the code at\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_dispatch"},{"body":"\n    (section ","tag":"#text"},{"tag":"REF","body":"5.4.2","href":"/sicpjs/5.4.2"},{"body":") so that it\n    recognizes compiled\n    functions\n    (as distinct from compound or primitive\n    functions)\n    and transfers control directly to the entry point of the\n    compiled code:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/5.5.7#footnote-1"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"\"apply_dispatch\",\n  test(list(op(\"is_primitive_function\"), reg(\"fun\"))),\n  branch(label(\"primitive_apply\")),\n  test(list(op(\"is_compound_function\"), reg(\"fun\"))),\n  branch(label(\"compound_apply\")),\n  test(list(op(\"is_compiled_function\"), reg(\"fun\"))),\n  branch(label(\"compiled_apply\")),\n  go_to(label(\"unknown_function_type\")),\n\"compiled_apply\",\n  push_marker_to_stack(),\n  assign(\"val\", list(op(\"compiled_function_entry\"), reg(\"fun\"))),\n  go_to(reg(\"val\")),"},{"body":"\n        At\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compiled_apply"},{"body":", as at\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compound_apply"},{"body":", we push a marker to the stack\n        so that a subsequent return statement\n        can revert the stack to this state.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    To enable us to run some compiled code when we start the evaluator\n    machine, we add a ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"branch"},{"body":" instruction at\n    the beginning of the evaluator machine, which causes the machine to\n    go to a new entry point if the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flag"},{"body":" register \n    is set.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/5.5.7#footnote-2"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$\\texttt{ }\\texttt{ }$branch(label(\"external_entry\")), // branches if flag is set    \n\"read_evaluate_print_loop\",\n  perform(list(op(\"initialize_stack\"))),\n  $\\ldots$\n      "},{"body":"The code at ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"external_entry"},{"body":"\n    assumes that the machine is started with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":"\n    containing the location of an instruction sequence that puts a result into\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" and ends with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"go_to(reg(\"continue\"))"},{"body":".\n      \n    Starting at this entry point jumps to the location designated\n    by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":", but first assigns\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"continue"},{"body":" so that execution will return to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_result"},{"body":",\n      \n    which prints the value in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" and then goes to\n    the beginning of the evaluator's\n    \n\tread-evaluate-print\n      \n    loop.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/5.5.7#footnote-3"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"\"external_entry\",\n  perform(list(op(\"initialize_stack\"))),\n  assign(\"env\", list(op(\"get_current_environment\"))),\n  assign(\"continue\", label(\"print_result\")),\n  go_to(reg(\"val\")),"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Now we can use the following\n    function\n    to compile a\n    function declaration,\n    execute the compiled code, and run the\n    \n\tread-evaluate-print\n      \n    loop so\n    we can try the\n    function.\n\tFor the interpreted program to refer to the names that\n\tare declared at top level in the compiled program, we\n        \t\n\tscan out the top-level names and \n\textend the global environment by binding these names to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"*unassigned*\""},{"body":",\n\tknowing that the compiled code will assign them \n\tthe correct values.\n      \n    Because we want the compiled code to\n    proceed\n    to the location in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"continue"},{"body":" with its result in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":", we compile the\n    program\n    with a target of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" and a\n    linkage of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"return\""},{"body":".\n        This is the only place other than return expressions to use this linkage.\n      \n    In order to transform the\n    object code produced by the compiler into executable instructions\n    for the evaluator register machine, we use the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assemble"},{"body":" from the\n    register-machine simulator\n    (section ","tag":"#text"},{"tag":"REF","body":"5.2.2","href":"/sicpjs/5.2.2"},{"body":").  We then initialize\n    the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" register to point to the list\n    of instructions, set the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flag"},{"body":" so that the evaluator will go to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"external_entry"},{"body":",\n      \n    and start the evaluator.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":1708,"program":"chap=4&prgrm=","body":"function compile_and_go(program) {\n    const toplevel_names = scan_out_declarations(program);\n    const unassigneds = list_of_unassigned(toplevel_names);\n    set_current_environment(extend_environment(\n                               toplevel_names,\n                               unassigneds, \n                               the_global_environment));\n    const instr_sequence = compile(program, \"val\", \"return\");\n    const instrs = assemble(instructions(instr_sequence), eceval);\n    set_register_contents(eceval, \"val\", instrs);\n    set_register_contents(eceval, \"flag\", true);\n    return start(eceval);\n} "}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    If we have set up\n    \n    stack monitoring, as at the end of\n    section ","tag":"#text"},{"tag":"REF","body":"5.4.4","href":"/sicpjs/5.4.4"},{"body":", we can examine the\n    stack usage of compiled code:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":false,"body":"compile_and_go(parse(`\nfunction factorial(n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n}\n                     `));","output":"total pushes = 0 \nmaximum depth = 0\nEC-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":7,"eval":false,"body":"factorial(5);","output":"total pushes = 36 \nmaximum depth = 14\nEC-evaluate value:\n120"},{"body":"\n    Compare\n    \n    this example with the evaluation of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial(5)"},{"body":"\n    using the interpreted version of the same\n    function,\n    shown at the end of section ","tag":"#text"},{"tag":"REF","body":"5.4.4","href":"/sicpjs/5.4.4"},{"body":".\n    \n        The interpreted version required 151 pushes and a maximum stack depth of 28.\n      \n    This illustrates the optimization that results from our compilation strategy.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Interpretation and compilation","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    With the programs in this section, we can now experiment with the\n    alternative execution strategies of interpretation and\n    compilation.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/5.5.7#footnote-4"},{"body":"\n    An interpreter raises the machine to the level of the user program; a\n    compiler lowers the user program to the level of the machine language.\n    We can regard the \n    \n        JavaScript\n      \n    language (or any programming language) as a\n    coherent family of abstractions erected on the machine language.\n    Interpreters are good for interactive program development and\n    debugging because the steps of program execution are organized in\n    terms of these abstractions, and are therefore more intelligible\n    to the programmer.\n    Compiled code can execute faster, because the steps of program execution\n    are organized in terms of the machine language, and the compiler is free\n    to make optimizations that cut across the higher-level\n    abstractions.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/5.5.7#footnote-5"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    The alternatives of interpretation and compilation also lead to\n    different strategies for\n    \n    porting languages to new computers. Suppose\n    that we wish to implement\n    JavaScript\n    for a new machine.  One strategy is\n    to begin with the explicit-control evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.4"},{"body":"\n    and translate its instructions to instructions for the\n    new machine.  A different strategy is to begin with the compiler and\n    change the code generators so that they generate code for the new\n    machine.  The second strategy allows us to run any\n    JavaScript\n    program on the new machine by first compiling it with the compiler running\n    on our\n    original JavaScript system, and linking it with a compiled version of the runtime\n    library.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-6","body":"6","href":"/sicpjs/5.5.7#footnote-6"},{"body":"  Better yet, we can compile the compiler itself, and run\n    this on the new machine to compile other\n    JavaScript programs.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-7","body":"7","href":"/sicpjs/5.5.7#footnote-7"},{"body":"  Or we can compile one of the interpreters of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" to produce an interpreter that\n    runs on the new machine.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.47","id":"#ex-5.47","child":[{"body":"\n    By\n    \n    comparing the stack operations used by compiled code to the stack\n    operations used by the evaluator for the same computation, we can\n    determine the extent to which the compiler optimizes use of the stack,\n    both in speed (reducing the total number of stack operations) and in\n    space (reducing the maximum stack depth).  Comparing this optimized\n    stack use to the performance of a special-purpose machine for the same\n    computation gives some indication of the quality of the compiler.\n    ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tExercise  asked you to determine, as a\n\tfunction of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", the number of pushes and\n\tthe maximum stack depth needed by the evaluator to compute\n\t","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" using the recursive factorial\n\tfunction\n\tgiven above.  Exercise ","tag":"#text"},{"tag":"REF","body":"5.13","href":"/sicpjs/5.2.4#ex-5.13"},{"body":" asked you\n\tto do the same measurements for the special-purpose factorial machine\n\tshown in figure ","tag":"#text"},{"tag":"REF","body":"5.11","href":"/sicpjs/5.1.4#fig-5.11"},{"body":". Now perform the\n\tsame analysis using the compiled ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":"function.","tag":"#text"},{"tag":"TEXT","id":"#p8","child":[{"body":"\n\t  Take the ratio of the number of pushes in the compiled version to the\n\t  number of pushes in the interpreted version, and do the same for the\n\t  maximum stack depth.  Since the number of operations and the stack\n\t  depth used to compute ","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" are linear in\n\t  ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", these ratios should\n\t  approach constants as ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" becomes large.\n\t  What are these constants? Similarly, find the ratios of the stack usage\n\t  in the special-purpose machine to the usage in the interpreted version.\n\t","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n\tCompare the ratios for special-purpose versus interpreted code to the\n\tratios for compiled versus interpreted code.  You should find that the\n\tspecial-purpose machine does much better than the compiled code, since\n\tthe hand-tailored controller code should be much better than what is\n\tproduced by our rudimentary general-purpose compiler.\n\t","tag":"#text"}]}]},{"tag":"LI","child":[{"body":"\n\tCan you suggest improvements to the compiler that would help it\n\tgenerate code that would come closer in performance to the\n\thand-tailored version?\n      ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 5.48","id":"#ex-5.48","child":[{"body":"\n    Carry out an analysis like the one in\n    exercise ","tag":"#text"},{"tag":"REF","body":"5.47","href":"/sicpjs/5.5.7#ex-5.47"},{"body":" to determine the\n    effectiveness of compiling the tree-recursive\n    \n    Fibonacci\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAVgHToOwChsDMBXAOwGMAXASwHsjQ8KAjACiIEpQBvUbUX0AJwCmZAv1q0APKABMoAPyhaALjqMWoALSgAjOwDUq5rS3TWAbm4BfIA","body":"function fib(n) { \n    return n < 2 ? n : fib(n - 1) + fib(n - 2); \n} "},{"body":"\n    compared to the effectiveness of using the special-purpose Fibonacci machine\n    of figure ","tag":"#text"},{"tag":"REF","body":"5.12","href":"/sicpjs/5.1.4#fig-5.12"},{"body":".  (For measurement of the\n    interpreted performance, see exercise ","tag":"#text"},{"tag":"REF","body":"5.29","href":"/sicpjs/5.4.4#ex-5.29"},{"body":".)\n    For Fibonacci, the time resource used is not linear in\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"; hence the ratios of stack operations will not\n    approach a limiting value that is independent of\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.49","id":"#ex-5.49","child":[{"body":"\n    This section described how to modify the explicit-control evaluator so\n    that interpreted code can call compiled\n    functions.\n    Show how to modify the compiler so that compiled\n    functions\n    can call not only primitive\n    functions\n    and compiled\n    functions,\n    but interpreted\n    functions\n    as well.  This requires modifying\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_function_call"},{"body":"\n    to handle the case of compound (interpreted)\n    functions.\n    Be sure to handle all the same ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"target"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"linkage"},{"body":" combinations\n    as in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_fun_appl"},{"body":".\n      \n    To do the actual\n    function\n    application,\n    the code needs to jump to the evaluator's\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compound_apply"},{"body":"\n    entry point. This label cannot be directly referenced in object code\n    (since the assembler requires that all labels referenced by the\n    code it is assembling be defined there), so we will add a register\n    called ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compapp"},{"body":" to the evaluator machine to\n    hold this entry point, and add an instruction to initialize it:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":""},{"body":"\n    To test your code, start by\n    \n\tdeclaring\n      \n    a\n    \n\tfunction\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":" that calls a\n    \n\tfunction\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"g"},{"body":".  Use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_go"},{"body":"\n    to compile the\n    \n\tdeclaration\n      \n    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    and start the evaluator.  Now, typing at the evaluator,\n    \n\tdeclare \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"g"},{"body":" and try to call\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":".\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.50","id":"#ex-5.50","child":[{"body":"\n    The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_go"},{"body":"\n    interface implemented in this section is\n    awkward, since the compiler can be called only once (when the\n    evaluator machine is started).  Augment the compiler–interpreter \n    interface by providing a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_run"},{"body":"\n    primitive that can be called from within the explicit-control evaluator\n    as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"compile_and_run(parse(`\nfunction factorial(n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n}\n                      `));","output":"EC-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"body":"factorial(5) ","prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAVgHToOwChsDMBDAYwBcB7AJwEsCAbAChQEog","output":"EC-Eval value:\n120"}]},{"tag":"EXERCISE","title":"Exercise 5.51","id":"#ex-5.51","child":[{"body":"\n    As an alternative to using the explicit-control evaluator's\n    \n\tread-evaluate-print\n      \n    loop, design a register machine that performs a\n    read-compile-execute-print loop.  That is, the machine should run a\n    loop that reads\n    \n\ta program,\n      \n    compiles it, assembles and\n    executes the resulting code, and prints the result.  This is easy to\n    run in our simulated setup, since we can arrange to call the\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assemble"},{"body":" as \"register-machine\n    operations.\"","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.52","id":"#ex-5.52","child":[{"body":"\n    Use the compiler to compile the\n    \n    metacircular evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" and run this program using the\n    register-machine simulator.\n    \n        Because the parser takes a string as input, you will need to\n        convert the program into a string. The simplest way to do this is\n        to use the back quotes (","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"`"},{"body":"),\n        as we have done for the example inputs to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_go"},{"body":" and\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compile_and_run"},{"body":". \n      \n    The resulting interpreter will run very slowly because of the multiple\n    levels of interpretation, but getting all the details to work is an\n    instructive exercise.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.53","id":"#ex-5.53","child":[{"body":"\n    Develop a rudimentary implementation of\n    JavaScript\n    in\n    \n    C (or some other low-level language of your choice) by translating the\n    explicit-control evaluator of section ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.4"},{"body":"\n    into C.  In order to run this code you will need to also\n    provide appropriate storage-allocation routines and other runtime\n    support.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.54","id":"#ex-5.54","child":[{"body":"\n    As a counterpoint to exercise ","tag":"#text"},{"tag":"REF","body":"5.53","href":"/sicpjs/5.5.7#ex-5.53"},{"body":", modify\n    the compiler so that it compiles \n    JavaScript functions\n    into sequences of\n    \n    C instructions.  Compile the metacircular evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" to produce a\n    JavaScript  \n    interpreter written in C.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/5.5.7#footnote-link-1","child":[{"body":"Of course, compiled\n    functions\n    as well as interpreted\n    functions\n    are compound (nonprimitive).  For compatibility with the terminology used\n    in the explicit-control evaluator, in this section we will use\n    \"compound\" to mean interpreted (as opposed to\n    compiled).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/5.5.7#footnote-link-2","child":[{"body":"Now that the evaluator machine starts\n    with a ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"branch"},{"body":", we must always initialize the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flag"},{"body":" register before starting the evaluator\n    machine.  To start the machine at its ordinary\n    \n\tread-evaluate-print\n      \n    loop, we\n    could use\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":1722,"program":"chap=4&prgrm=","body":"function start_eceval() {\n    set_register_contents(eceval, \"flag\", false);\n    return start(eceval);\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/5.5.7#footnote-link-3","child":[{"body":"Since\n    a compiled\n    function\n    is an object that the system may try to print, we also modify the system\n    print operation\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"user_print"},{"body":"\n    (from section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":") so that it will not\n    attempt to print the components of a compiled\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":false,"body":"function user_print(string, object) {\n    function prepare(object) {\n        return is_compound_function(object)\n               ? \"< compound function >\"\n               : is_primitive_function(object)\n               ? \"< primitive function >\"\n               : is_compiled_function(object)\n               ? \"< compiled function >\"\n               : is_pair(object)\n               ? pair(prepare(head(object)),\n                      prepare(tail(object)))\n               : object;\n    }\n    display(string + \" \" + stringify(prepare(object)));\n}"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/5.5.7#footnote-link-4","child":[{"body":"We can do even better by extending the compiler\n    to allow compiled code to call interpreted\n    functions.\n    See exercise ","tag":"#text"},{"tag":"REF","body":"5.49","href":"/sicpjs/5.5.7#ex-5.49"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/5.5.7#footnote-link-5","child":[{"body":"Independent of the strategy of execution, we\n    incur significant overhead if we insist that\n    \n    errors encountered in\n    execution of a user program be detected and signaled, rather than being\n    allowed to kill the system or produce wrong answers.  For example, an\n    out-of-bounds array reference can be detected by checking the validity\n    of the reference before performing it.  The overhead of checking,\n    however, can be many times the cost of the array reference itself, and\n    a programmer should weigh speed against safety in determining whether\n    such a check is desirable.  A good compiler should be able to produce\n    code with such checks, should avoid redundant checks, and should allow\n    programmers to control the extent and type of error checking in the\n    compiled code.\n    \n      Compilers for popular languages, such as\n      \n      C and C++,\n      put hardly any error-checking operations into\n      running code, so as to make things run as fast as possible.  As a\n      result, it falls to programmers to explicitly provide error checking.\n      Unfortunately, people often neglect to do this, even in\n      critical applications where speed is not a constraint.  Their programs\n      lead fast and dangerous lives.  For example, the notorious \n      \"Worm\"\n      that paralyzed the Internet in 1988 exploited the \n      \n      UNIX","tag":"#text"},{"body":"$^{\\textrm{TM}}$","tag":"LATEX"},{"body":"\n      operating system's failure to check whether the input buffer has\n      overflowed in the finger daemon. (See\n      Spafford 1989.)\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-6","count":6,"href":"/sicpjs/5.5.7#footnote-link-6","child":[{"body":"Of course, with either the interpretation or the\n    compilation strategy we must also implement for the new machine storage\n    allocation, input and output, and all the various operations that we took\n    as \"primitive\" in our discussion of\n    the evaluator and compiler.  One strategy for minimizing work here is\n    to write as many of these operations as possible in\n    JavaScript\n    and then compile them for the new machine.  Ultimately, everything reduces\n    to a small kernel (such as garbage collection and the mechanism for\n    applying actual machine primitives) that is hand-coded for the new\n    machine.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-7","count":7,"href":"/sicpjs/5.5.7#footnote-link-7","child":[{"body":"\n    This strategy leads to amusing tests of correctness of\n    the compiler, such as checking\n    whether the compilation of a program on the new machine, using the\n    compiled compiler, is identical with the\n    compilation of the program on the original\n    JavaScript\n    system.  Tracking down the source of differences is fun but often\n    frustrating, because the results are extremely sensitive to minuscule\n    details.","tag":"#text"}]}]