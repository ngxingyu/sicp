[{"id":"/sicpjs/4.3.2","tag":"TITLE","body":"4.3.2  \n    Examples of Nondeterministic Programs"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Section ","tag":"#text"},{"tag":"REF","body":"4.3.3","href":"/sicpjs/4.3.3"},{"body":" describes the\n    implementation of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator.  First,\n    however, we give some examples of how it can be used.  The advantage of\n    nondeterministic programming is that we can suppress the details of how\n    search is carried out, thereby\n    expressing our programs at a higher level of\n    \n    abstraction.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Logic Puzzles","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The following puzzle (taken from\n    Dinesman 1968) \n    is typical of a large class of simple logic puzzles:\n    ","tag":"#text"},{"tag":"EPIGRAPH","child":[{"body":"\n      Baker, Cooper, Fletcher, Miller, and Smith live on different floors of\n      an apartment house that contains only five floors.  Baker does not\n      live on the top floor.  Cooper does not live on the bottom floor.\n      Fletcher does not live on either the top or the bottom floor.  Miller\n      lives on a higher floor than does Cooper.  Smith does not live on a\n      floor adjacent to Fletcher","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s.  Fletcher does not live on a floor\n      adjacent to Cooper","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s.  Where does everyone live?\n    ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We can determine who lives on each floor in a straightforward way by\n    enumerating all the possibilities and imposing the given\n    restrictions:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.3.2#footnote-1"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":11,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAzAVwDsBjAFwEsB7E0AEyoGdryKAKKigUwFtmASlABvAJC5QU0ACceFIjPosA+iSIAbDV14DBk6YekB+UBRlEeBo4YBcoVeq0cKAQyrbu-IfptHT5pbWfqD2jprafPwARjwyHAAWPK4MOt6CADRm7p66Pr4hUqZMrFTsLjlpegWF9gSuGsw8ANy4AL74xOy09Hya1AAOGjwqDADuPFplAOYcwiLBZHSsoNGuANZxoAC8oK580RwAjFnYWRhZKFkArIKthkskK0s0A1u7+4cnoGegF6g3O6LZYUUAEYYUMhJGQ7PYHY6nc6XQH3aSPFZ8DzDGEfeHfX7-K6gW6oqTo0HMTEUBKwz4In5IgHEoGGOQARyIVDkHBKbEoHA0LE4a02MiyLzeYrBEKhcSymK0ctAlO4CUE6tJsh4HK5PA4AEJQBwRe9trtbizpOzOdzDRwJabdkcNcFrbqDUbwfJZTizczLVI3bbPTLoTs-c6A1qddyFdjQAA+UAOmRRoN6u18VzUlSuaLMDgq6mgAC00u90OEZqdLtZ2ptGaNWZzeYLXshYbLKarEdrVvkinogtYAqFHAARCaZOOslPMsFCtJh5xxymZ8maK84vPFzZlxP2z714fKxkF7v9+O43F19fU2fd0ZL0WEuuXy6Org+hpBsNRhMphIWY7iAA","body":"function multiple_dwelling() {\n    const baker = amb(1, 2, 3, 4, 5);\n    const cooper = amb(1, 2, 3, 4, 5);\n    const fletcher = amb(1, 2, 3, 4, 5);\n    const miller = amb(1, 2, 3, 4, 5);\n    const smith = amb(1, 2, 3, 4, 5);\n    require(distinct(list(baker, cooper, fletcher, miller, smith)));\n    require(! (baker === 5));\n    require(! (cooper === 1));\n    require(! (fletcher === 5));\n    require(! (fletcher === 1));\n    require(miller > cooper);\n    require(! (math_abs(smith - fletcher) === 1));\n    require(! (math_abs(fletcher - cooper) === 1));\n    return list(list(\"baker\", baker),\n                list(\"cooper\", cooper),\n                list(\"fletcher\", fletcher),\n                list(\"miller\", miller),\n                list(\"smith\", smith));\n} "}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"multiple_dwelling()"},{"body":"\n    produces the result\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"list(list(\"baker\", 3), list(\"cooper\", 2), list(\"fletcher\", 4),\n     list(\"miller\", 5), list(\"smith\", 1))"},{"body":"\n    Although this simple\n    function\n    works, it is very slow.\n    Exercises ","tag":"#text"},{"tag":"REF","body":"4.37","href":"/sicpjs/4.3.2#ex-4.37"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"4.38","href":"/sicpjs/4.3.2#ex-4.38"},{"body":" discuss some possible\n    improvements.\n\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.36","id":"#ex-4.36","child":[{"body":"\n    Modify the multiple-dwelling\n    function\n    to omit the requirement that Smith and Fletcher do not live on adjacent\n    floors.  How many solutions are there to this modified puzzle?\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.37","id":"#ex-4.37","child":[{"body":"\n    Does the order of the restrictions in the multiple-dwelling\n    function\n    affect the answer? Does it affect the time to find an answer?  If you\n    think it matters, demonstrate a faster program obtained from the given\n    one by reordering the restrictions.  If you think it does not matter,\n    argue your case.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.38","id":"#ex-4.38","child":[{"body":"\n    In the multiple dwelling problem, how many sets of assignments are\n    there of people to floors, both before and after the requirement that\n    floor assignments be distinct?  It is very inefficient to generate all\n    possible assignments of people to floors and then leave it to\n    backtracking to eliminate them.  For example, most of the restrictions\n    depend on only one or two of the person-floor\n    names,\n    and can thus be imposed before floors have been selected for all the people.\n    Write and demonstrate a much more efficient nondeterministic\n    function\n    that solves this problem based upon generating only those possibilities that\n    are not already ruled out by previous restrictions.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.39","id":"#ex-4.39","child":[{"body":"\n    Write an ordinary\n    JavaScript\n    program to solve the multiple dwelling puzzle.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.40","id":"#ex-4.40","child":[{"body":"\n    Solve the following \"Liars\" puzzle (from\n    Phillips 1934):\n    ","tag":"#text"},{"tag":"EPIGRAPH","child":[{"body":"\n      Five schoolgirls sat for an examination.  Their parents","tag":"#text"},{"body":"—","tag":"#text"},{"body":"so they\n      thought","tag":"#text"},{"body":"—","tag":"#text"},{"body":"showed an undue degree of interest in the result.  They\n      therefore agreed that, in writing home about the examination, each \n      girl should make one true statement and one untrue one.  The following\n      are the relevant passages from their letters:\n      ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\t  Betty:\n\t  \"Kitty was second in the examination.  I was only third.\"","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  Ethel:\n\t  \"You\"","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  Joan: \"I was third, and poor old Ethel was bottom.\"","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  Kitty: \"I came out second.  Mary was only fourth.\"","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  Mary: \"I was fourth.  Top place was taken by Betty.\"","tag":"#text"}]}]},{"body":"\n      What in fact was the order in which the five girls were placed?\n    ","tag":"#text"}]}]},{"tag":"EXERCISE","title":"Exercise 4.41","id":"#ex-4.41","child":[{"body":"\n    Use the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator to solve the following\n    puzzle:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.3.2#footnote-2"},{"tag":"EPIGRAPH","child":[{"body":"\n      Mary Ann Moore","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s father has a yacht and so has each of his four\n      friends:  Colonel Downing, Mr.","tag":"#text"},{"body":" ","tag":"#text"},{"body":"Hall, Sir Barnacle Hood, and\n      Dr.","tag":"#text"},{"body":" ","tag":"#text"},{"body":"Parker.\n      Each of the five also has one daughter and each has named his\n      yacht after a daughter of one of the others.  Sir Barnacle","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s yacht is\n      the Gabrielle, Mr.","tag":"#text"},{"body":" ","tag":"#text"},{"body":"Moore owns the Lorna; Mr.","tag":"#text"},{"body":" ","tag":"#text"},{"body":"Hall the Rosalind.  The\n      Melissa, owned by Colonel Downing, is named after Sir Barnacle","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s\n      daughter.  Gabrielle","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s father owns the yacht that is named after\n      Dr.","tag":"#text"},{"body":" ","tag":"#text"},{"body":"Parker","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s daughter.  Who is Lorna","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s father?\n    ","tag":"#text"}]},{"body":"\n    Try to write the program so that it runs efficiently (see\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.38","href":"/sicpjs/4.3.2#ex-4.38"},{"body":").  Also determine\n    how many solutions there are if we are not told that Mary Ann's last\n    name is Moore.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.42","id":"#ex-4.42","child":[{"body":"\n    Exercise ","tag":"#text"},{"tag":"REF","body":"2.42","href":"/sicpjs/2.2.3#ex-2.42"},{"body":" described the\n    \"eight-queens puzzle\" of placing queens on a chessboard so that\n    no two attack each other. Write a nondeterministic program to solve this\n    puzzle.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Parsing natural language","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Programs designed to accept natural language as input usually start by\n    attempting to ","tag":"#text"},{"tag":"EM","child":[{"body":"parse","tag":"#text"}]},{"body":" the input, that is, to match the input\n    against some grammatical structure.  For example, we might try to\n    recognize simple sentences consisting of an article followed by a noun\n    followed by a verb, such as \"The cat eats.\"  To accomplish\n    such an analysis, we must be able to identify the parts of speech of\n    individual words.  We could start with some lists that classify various\n    words:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.3.2#footnote-3"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuBjAewDsBnAF1BKIFdzQBeUAGwEtKAKAIhvu4A0obpVoATAKYkKg4QAcATkQBmEsmSILZ3AgEMZQnS13ruASgDc+YuSoA3CQoBGZJqw4UeD59tFi2atosEgQUtAqBhhL6ZL7BEnKxltaklKC6ChRsBMGuzOxc3BlZORLaFAAWZYa65hZAA","body":"const nouns = list(\"noun\", \"student\", \"professor\", \"cat\", \"class\");\n\nconst verbs = list(\"verb\", \"studies\", \"lectures\", \"eats\", \"sleeps\");\n\nconst articles = list(\"article\", \"the\", \"a\"); "},{"body":"\n    We also need a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"grammar","tag":"#text"}]},{"body":", that is, a set of rules describing how\n    grammatical elements are composed from simpler elements.  A very\n    simple grammar might stipulate that a sentence always consists of two\n    pieces—a noun phrase followed by a verb—and that a noun\n    phrase consists of an article followed by a noun.  With this grammar, the\n    sentence \"The cat eats\" is parsed as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"list(\"sentence\",\n     list(\"noun-phrase\", list(\"article\", \"the\"), list(\"noun\", \"cat\"),\n     list(\"verb\", \"eats\"))"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    We can generate such a parse with a simple program that has separate\n    functions\n    for each of the grammatical rules.  To parse a sentence, we identify its\n    two constituent pieces and return a list of these two elements, tagged with\n    the symbol ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sentence"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":30,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuBjAewDsBnAF1BKIFdzQBeUAGwEtKAKAIhvu4A0obpVoATAKYkKg4QAcATkQBmEsmSILZ3AgEMZQnS13ruASgDc+YuSoA3CQoBGZJqw4UeD59tFi2atosEgQUtAqBhhL6ZL7BEnKxltaklKC6ChRsBMGuzOxc3BlZORLaFAAWZYa65la4wVQ0FAD6AJ4SrXIZZBJibiS0LCz1yvShbKSg3Qq9LQDummKciwpiLQUUZqAA3qD7B7gHoBEAjrRsEZwAhKAcLYPDnM3tnS0zvWJmycdnF1e3e6PFicAC2ElBTkcnCqumWLw6XR6fTMQgoujYINW60232+VmONjSyjoJHW2LcsPhRFaiPeyK+BIOCLeHz6bnRmOeNNeSNmKKZ+wiYQUJHcXCpKyWGw8qNAJPo5KWyQAvvgxiQJlM2Q9Se8KgoTBJONsdkcDsLwmLNjw+CQALRyA1GwTm47u9067GcYrZXKot0eoNepbc+hkfG4NW4DVasU6tgkOS0TyJ5NbXaBll8z5uNMpwWgIlUXrSNw60sUKQEY0-C0Sc6XY1AoYg7P0-lfOtCzpW0CVqzR2NZbXIlqV6u13YewOW0XizwiKRVzXVQNBz1ju36w29E0Cdcbg4htacbwuSPRhNJlOcG3cSrVfY6fSyYTRChJSxAA","body":"function parse_sentence() {      \n    return list(\"sentence\",\n                parse_noun_phrase(),\n                parse_word(verbs));\n} "},{"body":"\n    A noun phrase, similarly, is parsed by finding an article followed by a\n    noun:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":30,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuBjAewDsBnAF1BKIFdzQBeUAGwEtKAKAIhvu4A0obpVoATAKYkKg4QAcATkQBmEsmSILZ3AgEMZQnS13ruASgDc+YuSoA3CQoBGZJqw4UeD59tFi2atosEgQUtAqBhhL6ZL7BEnKxltaklKC6ChRsBMGuzOxc3BlZORLaFAAWZYa65la4wVQ0FAD6AJ4SrXIZZBJibiS0LCz1yvShbKSg3Qq9LQDummKciwpiLQUUZqAA3qD7B7gHoBEAjrRsEZwAhKAcLYPDnM3tnS0zvWJmycdnF1e3e6PFicAC2ElBTkcnCqumWLw6XR6fTMQgoujYINW60232+VmONjSyjoJHW2LcsPhRFaiPeyK+BIOCLeHz6bnRmOeNNeSNmKKZ+wiYQUJHcXCpKyWGw8qNAJPo5KWyQAvvgxiQJlM2S1etIpAQJJxtntjqAjgdheExZseHqKAbqhazS6Djq+CR3hUFCYjajna6XTrsZxvC58bg1bgNVqxTq2CQ5LRPAmk1tdgGWXzPm5U8nBaAiVR7W4dfbHcaC39LkagUMQVn6fyvj9LZ1raB7VYozGstrkQ9SV6fb1jRnfu3ReLPLxSQBaOTe32CAOB47BpacYrZXL+teujdrbn0MgRqPxxPJzi27iVar7HT6WTCaIUJKWIA","body":"function parse_noun_phrase() {\n    return list(\"noun-phrase\",\n                parse_word(articles),\n                parse_word(nouns));\n} "}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    At the lowest level, parsing boils down to repeatedly checking that\n    the next\n    not-yet-parsed\n    word is a member of the list of words for the\n    required part of speech.  To implement this, we maintain a global\n    variable\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not_yet_parsed"},{"body":",\n      \n    which is the input that has not yet been parsed.  Each time we check a word,\n    we require that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not_yet_parsed"},{"body":"\n    must be nonempty and that it should begin with a word from the designated\n    list.  If so, we remove that word from\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not_yet_parsed"},{"body":"\n    and return the word together with its part of speech (which is found at\n    the head of the list):","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.3.2#footnote-4"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":28,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AxpXIcyVQTP6gCAS1kAKAETzymgDShNswdyLkS+w0zaUAZkQ4dKbS5oksLBtwRaPNASnFcKRkyADciNgAjDiVVDU0I6NdjbhUHV2IJEkE2DK8iDw4U4iImYsDJaVlQdhIVCWJYgXiSLTqG4lcSAAsiVxYAoNsFbJVpUFZOIhodZh62XyJ1f1AAb1xQLdA8nLZyZTU27UoFAFomBaX9Te27++2prhoAd2dudQ7Gh389W4eAZN2M83mwPjoOP5KgBffAjchjCZPGZccxmCTLVZrB7-HakXIHVpaVEkdH9P6AwHI2ancjzRZcFYUykPamgj5JGJQ8Sw3DwxEHakqchMQRtYWikhY3FUWgMWjI3gCCVi8R3EI1ElKakkskrNXbPIAR0EKjy6jUs2EBHUsvojEV3NxuwJoBJPLho3qSOBM3Z6nZNFaWJxd2NpvNAEJQJbyNbbdR7QrfdwnWGiCazcto7H4wBbIh5qKRdR9FjgxPy5gp36gEgsFQ2wPBqGVdXVMi2WncV7vJRlityh01g1bO1VxVKeuNhND5PTVOjvF7QlHUuFD7No61rsKHvsmH4IUisXqImaXrkrZuDyWQyFEgVQJAA","body":"function parse_word(word_list) {      \n    require(! is_null(not_yet_parsed));\n    require(! is_null(member(head(not_yet_parsed), tail(word_list))));\n    const found_word = head(not_yet_parsed);\n    not_yet_parsed = tail(not_yet_parsed);\n    return list(head(word_list), found_word);\n} "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    To start the parsing, all we need to do is set\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not_yet_parsed"},{"body":",\n      \n    to be\n    the entire input, try to parse a sentence, and check that nothing is\n    left over:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANxA","body":"let not_yet_parsed = null; "},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":29,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AxpXIcyVQTP6gCAS1kAKAETzymgDShNswdyLkS+w0zaUAZkQ4dKbS5oksLBtwRaPNASnFcKRkyADciNgAjDiVVDU0I6NdjbhUHV2IJEkE2DK8iDw4U4iImYsDJaVlQdhIVCWJYgXiSLTqG4lcSAAsiVxYAoNsFbJVpUFZOIhoAd2dudXm2bhpW-1AAb1Ad3dxd0DyAR0EVPPUAQlA1GnJhAnUqWgZaKa5uf0qD49Pzq5u7iJ1ABbIjAqKRdR9FiLJ70RhvHj+AwkFgqB7LVbrT5fXYhGq2SgKVaYpTQ2HUeGvdjvXE7OEvZg0nhKVHox6UxmIj7ib6kXLkZRqNrkpYLNbC5GgQnEuYLSoAX3wI3IYwmiNuRPIzB6bF8RHUG02+12eRybEFrS0OgAtExdfr9CaDi6XRrMeoOo0HMjna7-e6FhyFBxPuIlbgVWrBRquOYzBIDUbXX6zQKhQk4yQE-09H7-W7mZqFDq9VxDXmCwXAyt1EkYmHcBGo-V1UWVOQmII2h2uyQjX6GQjmbwBL3u7y8dUyFmlLGzNnVUnJzsfmcDQD7hznsPph86Yd+RbQFnw-gNeO2lbNL1czs3B5LIZCiQKoEgA","body":"function parse_input(input) {\n    not_yet_parsed = input;\n    const sent = parse_sentence();\n    require(is_null(not_yet_parsed));\n    return sent;\n} "}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    We can now try the parser and verify that it works for our simple test\n    sentence:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"body":"parse_input(list(\"the\",  \"cat\",  \"eats\")); ","prependLength":36,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AxpXIcyVQTP6gCAS1kAKAETzymgDShNswdyLkS+w0zaUAZkQ4dKbS5oksLBtwRaPNASnFcKRkyADciNgAjDiVVDU0I6NdjbhUHV2IJEkE2DK8iDw4U4iImYsDJaVlQdhIVCWJYgXiSLTqG4lcSAAsiVxYAoNsFbJVpUFZOIhoAd2dudXm2bhpW-1AAb1Ad3dxd0DyAR0EVPPUAQlA1GnJhAnUqWgZaKa5uf0qD49Pzq5u7iJ1ABbIjAqKRdR9FiLJ70RhvHj+AwkFgqB7LVbrT5fXYhGq2SgKVaYpTQ2HUeGvdjvXE7OEvZg0nhKVHox6UxmIj7ib6kXLkZRqNrkpYLNbC5GgQnEuYLSoAX3wI3IYwmiNuRPIzB6bF8RHUG02+12eRybEFrS0OgAtExdfr9CaDi6XRrMeoOo0HMjna7-e6FhyFBxPuIlbgVWrBRquOYzBIDUbXX6zQKhQk4yQE-09H7-W7mZqFDq9VxDXmCwXAyt1EkYmHcBGo-V1UWVOQmII2h2uyQjX6GQjmbwBL3u7y8dUyFmlLGzNnVUnJzsfmcDQD7hznsPph86Yd+RbQFnw-gNeO2lbNL1czs3B5LIZCiQKoEgA","output":"Starting a new problem\namb-evaluate value:\nlist(\"sentence\",\n     list(\"noun-phrase\", list(\"article\", \"the\"), list(\"noun\", \"cat\")),\n     list(\"verb\", \"eats\"))"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator is useful here because it is\n    convenient to express the parsing constraints with the aid of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"require"},{"body":". Automatic search and backtracking\n    really pay off, however, when we consider more complex grammars where there\n    are choices for how the units can be decomposed.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    Let's add to our grammar a list of prepositions:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuBjAewDsBnAF1AAcAnAU2qLIEsKXSzQBeUAGxaUAFACI6jEQBpQIgGZFaUmRSJKZLEkpEAjAJ5aA7mwAWIgJQBuIA","body":"const prepositions = list(\"prep\", \"for\", \"to\",  \"in\", \"by\", \"with\"); "},{"body":"\n    and define a prepositional phrase (e.g., \"for the cat\") to be\n    a preposition followed by a noun phrase:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":56,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AZoPIBjEgEtK5UK05EaAd0ptuACi06aBeRxIBKUAG9QN27lug2RAI6D5T3QEJQJmuWEEulS0DLSqXNxmZuIOTq7uRF4+HH4BugC2ROkARkRsugAWRCx6wfSM4TxmADSgJCzygQbcRibmUdH2tjJKpqASlNItzfygRSVB1OVh7BGdDmWhzLM8o-WNkyEVK5Extk4kgmzKxqaFxXrNraY1-YPkw9q7uAC++D3kfUxOTJQc8gpeqNTiRdAAib5EJhg2pggZsGGgMEkSiIpHyciIsHZOhYjQAgpgzq4D59KjSDjAtrg8mY2GmQTcIjkEhY76UCREDgcbRYmQsVmwmQEFjconiEm9MgANzy2UpAhB4NlbGyWIZ3HkXKxxDkR21sOKJA46uIUJNxNJZHYCmFXKpZzBNvkdqxJCKWJY4sk0jkimUlRo-3STGIfnuzAKbFFiQs1gcoC6NgORxO1LBwdDRAAtLTs0wozGYUmE6WbIHmrpnXaODUS2WExWnpMKVFxG8pLJAQGVuHpJHo1xdHGS52-UpQOkWHRcjQiAAPEjM0oRguDogjhsp46gFg5FvkAcx6r1hulqcz9QLpcPXRKsF5tdFk9n19vsu0o9cF-v39vwOQr8-zdiwBBfrGHR7DYbyxKQqaTtOs7XsuuiBpmYafk+Q5tq8Ppdv6Ki9lwLLMjIsZWCW25po6xE3mRxZ-uWvaYYW2E-n+gYqtk4HDp0Ha+t2hFqDQXE8ZuthjoJF5IYuKGiVhG4UVucE7nu2S6PJrFEOxjEIZec6ybe95cfmWkMbpFm2Jp646ZZjEAT8fwAv6oFiZBJYvAAkJ5diwYcO7SVehl6E2OgaXKtZ8Xh449sJGJMIIoLxYl4k2Is2xqLwAjJSQUGgFaoC0aMaHMnRsZ5XEbgeL4-giJs0zLJlOF+fBtHttFgkOVCTkgWBCnDlYpaUSp1GghCPymeu5kcb2laAT1-q1rZ-7MauWm8e1uCBjld7pu6RDqocTIsniBJuh6QoCtNf4ZmaTAmrCGLnQdQoimKbZAA","body":"function parse_prepositional_phrase() {      \n    return list(\"prep-phrase\",\n                parse_word(prepositions),\n                parse_noun_phrase());\n} "},{"body":"\n    Now we can define a sentence to be a noun phrase followed by a verb\n    phrase, where a verb phrase can be either a verb or a verb phrase\n    extended by a prepositional phrase:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/4.3.2#footnote-5"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":47,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AZoPIBjEgEtK5UK05EaAd0ptuACi06aBeRxIBKUAG9QN27lug2RAI6D5T3QEJQJmuWEEulS0DLSqXNxmZuIOTq7uRF4+HH4BugC2ROkARkRsugAWRCx6wfSM4TxmADSgJCzygQbcRibmUdH2tjJKpqASlNItzfygRSVB1OVh7BGdDmWhzLM8o-WNkyEVK5Extk4kgmzKxqaFxXrNraY1-YPkw9q7uAC++D3kfUxOTJQc8gpeqNTiRdAAib5EJhg2pggZsGGgMEkSiIpHyciIsHZOhYjQAgpgzq4KSyQHKSrMH5-AGKcgsAjMApsFhcXQWawOUBdGwHI4nNrgyFMAC0TGZrKIMJ5XNlNkpzV0wpp5I4NRlcq5lKo0iZLLZUXEb1wHz6Os+wMFYPNWNMgm4RHIJCx30oEiIHA42ixMhYzthMgIrI4RPEJt6ZAAbnlshxLWcwdG2NlbYduPIPVjiHIjpnYcUSCHYRxiFCQ8TTWR2ApAx746CwdX5LWsSQiliWKHJNI5HSVCsaP90kxiH57nrJeyrLKZXzjqAQeChyOiCLzWKJVxpZrNQqnrom7W1dUNTv5QPFea1Z03qTe0p+2ox7rxfrEhyZXfyaB0iw6LkaCIAAPEhHVKcdX0lD9NTnZQWBySYX03IgTzPHdf3-dRgNAh5dEXa17g3N9tzQ0iyPNCcuFQsiaJ3SllX+ckGUo98Oj2Gw3liUh+R-P8AOwsClQHZdRwoyCDRvbsyT7SkMSYQRQTkhToNsRZtjUXgBCUkh2NAStQC4J1RkpQycJkd9dLiNwPF8fwRE2aZlg0w1Z24+dTKNKT7wpYTHTM98rFcw553w0zHXMkiaO1CDkPZaiooHJNshY9lJK-GTEpjFKVJsdKHww-iQMEpKWJyrlYNAeDsl0ErxJQ08yIKrCitw-CkqIyVIto7rbFq5D4p6nr6OpRi6WYurUpchwXgASBmuwuOC5QmsAlq9D3HQapja9PNwWTyHk0F8LbKVizTPy8QJVt2wDP0urIsESyIMssQxa7TqRQNgyJaIgA","body":"function parse_sentence() {\n    return list(\"sentence\",\n                parse_noun_phrase(),\n                parse_verb_phrase());\n}\nfunction parse_verb_phrase() {\n    function maybe_extend(verb_phrase) {\n        return amb(verb_phrase,\n                   maybe_extend(list(\"verb-phrase\",\n                                     verb_phrase,\n                                     parse_prepositional_phrase())));\n    }\t\t   \n    return maybe_extend(parse_word(verbs));\n} "}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    While we're at it, we can also elaborate the definition of noun\n    phrases to permit such things as \"a cat in the class.\"  What\n    we used to call a noun phrase, we'll now call a simple noun phrase,\n    and a noun phrase will now be either a simple noun phrase or a noun phrase\n    extended by a prepositional phrase:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":47,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AZoPIBjEgEtK5UK05EaAd0ptuACi06aBeRxIBKUAG9QN27lug2RAI6D5T3QEJQJmuWEEulS0DLSqXNxmZuIOTq7uRF4+HH4BugC2ROkARkRsugAWRCx6wfSM4TxmADSgJCzygQbcRibmUdH2tjJKpqASlNItzfygRSVB1OVh7BGdDmWhzLM8o-WNkyEVK5Extk4kgmzKxqaFxXrNraY1-YPkw9q7uAC++D3kfUxOTJQc8gpeqNTiRdAAib5EJhg2pggZsGGgMEkSiIpHyciIsHZOhYjQAgpgzq4KSyQHKSrMH5-AGKcgsAjMApsFhcXQWawOUBdGwHI4nNrgyFMAC0TGZrKIMJ5XNlNkpzV0wpp5I4NRlcq5lKo0iZLLZUXEb1wHz6Os+wMFYPNWNMgm4RHIJCx30oEiIHA42ixMhYzthMgIrI4RPEJt6ZAAbnlshxLWcwdG2NlbYduPIPVjiHIjpnYcUSCHYRxiFCQ8TTWR2ApAx746CwdX5LWsSQiliWKHJNI5HSVCsaFwnY6ZIkOTK+cdQCDwUOSCOpdUNZrbNr7nrJeylyu5ZSk9kNwbOm9Sb2lP21DR94ex1YZafyaB0iw6LkaEQAB7zh66a-i-VEOOmqTsoLA5L+MY3tuO6as+r7qJ+356DOiYxmKEpcNKMHYThoB-hhRDQbhxGypSyr-OSDI3uyHR7DYLwAJAMXYsSkPyT4vm+iGOnoCpPBByZqse3Zkn2lIYkwgighJUlAbYizbGovACDJJB0aAlagHOoyUnOC7supcRuB4vj+CImzTMsSmGhObFTnORoiWeFIDv86RMMQfjrv+m4crKtmHFOKFuR5RAiua6EAVhxF8TouhNrWapEThsWlPcQmOQ+YkDua1FyTYWXnnBXFfjxky6j5XD5VyIGgGB2TleQUHLjhxUIaVP4oRFlWLi1JG4blPXJf1JFkdSFF0lRPU0TZDhvKxgXKG174dbxrnyO5nmDQRNGObg4nkJJoIoW2i5InaDpOniBKtu2AZ+tFxFgiWRBlliGK3WdYKBsGRLREAA","body":"function parse_simple_noun_phrase() {      \n    return list(\"simple-noun-phrase\",\n                parse_word(articles),\n                parse_word(nouns));\n}\nfunction parse_noun_phrase() {\n    function maybe_extend(noun_phrase) {\n        return amb(noun_phrase,\n                   maybe_extend(list(\"noun-phrase\",\n                                     noun_phrase,\n                                     parse_prepositional_phrase())));\n    }\n    return maybe_extend(parse_simple_noun_phrase());\n} "}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    Our new grammar lets us parse more complex sentences.  For example\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":62,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AZoPIBjEgEtK5UK05EaAd0ptuACi06aBeRxIBKUAG9QN27lug2RAI6D5T3QEJQJmuWEEulS0DLSqXNxmZuIOTq7uRF4+HH4BugC2ROkARkRsugAWRCx6wfSM4TxmADSgJCzygQbcRibmUdH2tjJKpqASlNItzfygRSVB1OVh7BGdDmWhzLM8o-WNkyEVK5Extk4kgmzKxqaFxXrNraY1-YPkw9q7uAC++D3kfUxOTJQc8gpeqNTiRdAAib5EJhg2pggZsGGgMEkSiIpHyciIsHZOhYjQAgpgzq4KSyQHKSrMH5-AGKcgsAjMApsFhcXQWawOUBdGwHI4nNrgyFMAC0TGZrKIMJ5XNlNkpzV0wpp5I4NRlcq5lKo0iZLLZUXEb1wHz6Os+wMFYPNWNMgm4RHIJCx30oEiIHA42ixMhYzthMgIrI4RPEJt6ZAAbnlshxLWcwdG2NlbYduPIPVjiHIjpnYcUSCHYRxiFCQ8TTWR2ApAx746CwdX5LWsSQiliWKHJNI5HSVCsaP90kxiH57nrJeyrLKZXzjqAQeChyOiCLzWKJVxpZrNQqnrom7W1dUNTv5QPFea1Z03qTe0p+2ox7rxfrEhyZXfyaB0iw6LkaCIAAPEhHVKcdX0lD9NTnZQWBySYX03IgTzPHdf3-dRgNAh5dEXa17g3N9tzQ0iyPNCcuFQsiaJ3SllX+ckGUo98Oj2Gw3liUh+R-P8AOwsClQHZdRwoyCDRvbsyT7SkuCdR0ZHfKxZ24+d8LknDFJImjtQg5D2WonSByTbIWPZSSvxk4yYzM6DbEsh8MP4kDBJMli7NlWDQHg7JdDc8SUNPMinKwlzcPwkyiMlbTaNi2x-OQwy4ri+jqUYulmIC8zDRlF4AEg8rsLjDnnELALCvQ9x0PyY2vI0pPvCkBwxJhBFBFq2o8igpiWSpeAEDqSHY0BK1ADTRlkx1NPfYa4jcDxfH8ERNmmZY1EieZ9lU5QNPq3BKUGvCrTbKVizTKa8QJVt2wDP0YrIsESyIMssQxa7TqRQNgyJaIgA","body":"parse_input(list(\"the\", \"student\", \"with\", \"the\", \"cat\",\n                 \"sleeps\", \"in\", \"the\", \"class\")); "},{"body":"\n  produces\n  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":false,"body":"list(\"sentence\",\n     list(\"noun-phrase\",\n          list(\"simple-noun-phrase\", \n               list(\"article\", \"the\"), list(\"noun\", \"student\")),\n          list(\"prep-phrase\", list(\"prep\", \"with\"),\n               list(\"simple-noun-phrase\",\n                    list(\"article\", \"the\"),\n                    list(\"noun\", \"cat\")))),\n     list(\"verb-phrase\",\n          list(\"verb\", \"sleeps\"),\n          list(\"prep-phrase\", list(\"prep\", \"in\"),\n               list(\"simple-noun-phrase\", \n                    list(\"article\", \"the\"),\n                    list(\"noun\", \"class\")))))"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n    Observe that a given input may have more than one legal parse.  In the\n    sentence \"The professor lectures to the student with the cat,\"\n    it may be that the professor is lecturing with the cat, or that the student\n    has the cat.  Our nondeterministic program finds both possibilities:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":62,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAbAUwBdQA7AexIH0BPUmgBwEMAnAZyIBNQBeCgFcCBANz4AZoPIBjEgEtK5UK05EaAd0ptuACi06aBeRxIBKUAG9QN27lug2RAI6D5T3QEJQJmuWEEulS0DLSqXNxmZuIOTq7uRF4+HH4BugC2ROkARkRsugAWRCx6wfSM4TxmADSgJCzygQbcRibmUdH2tjJKpqASlNItzfygRSVB1OVh7BGdDmWhzLM8o-WNkyEVK5Extk4kgmzKxqaFxXrNraY1-YPkw9q7uAC++D3kfUxOTJQc8gpeqNTiRdAAib5EJhg2pggZsGGgMEkSiIpHyciIsHZOhYjQAgpgzq4KSyQHKSrMH5-AGKcgsAjMApsFhcXQWawOUBdGwHI4nNrgyFMAC0TGZrKIMJ5XNlNkpzV0wpp5I4NRlcq5lKo0iZLLZUXEb1wHz6Os+wMFYPNWNMgm4RHIJCx30oEiIHA42ixMhYzthMgIrI4RPEJt6ZAAbnlshxLWcwdG2NlbYduPIPVjiHIjpnYcUSCHYRxiFCQ8TTWR2ApAx746CwdX5LWsSQiliWKHJNI5HSVCsaP90kxiH57nrJeyrLKZXzjqAQeChyOiCLzWKJVxpZrNQqnrom7W1dUNTv5QPFea1Z03qTe0p+2ox7rxfrEhyZXfyaB0iw6LkaCIAAPEhHVKcdX0lD9NTnZQWBySYX03IgTzPHdf3-dRgNAh5dEXa17g3N9tzQ0iyPNCcuFQsiaJ3SllX+ckGUo98Oj2Gw3liUh+R-P8AOwsClQHZdRwoyCDRvbsyT7SkuCdR0ZHfKxZ24+d8LknDFJImjtQg5D2WonSByTbIWPZSSvxk4yYzM6DbEsh8MP4kDBJMli7NlWDQHg7JdDc8SUNPMinKwlzcPwkyiMlbTaNi2x-OQwy4ri+jqUYulmIC8zDRlF4AEg8rsLjDnnELALCvQ9x0PyY2vI0pPvCkBwxJhBFBFq2o8igpiWSpeAEDqSHY0BK1ADTRlkx1NPfYa4jcDxfH8ERNmmZY1EieZ9lU5QNPq3BKUGvCrTbKVYVdd1PW9WFsxKvMgrPZFUVhE7U3tKa8QJVt2wDP0iWiIA","body":"parse_input(list(\"the\", \"professor\", \"lectures\",\n                 \"to\", \"the\", \"student\", \"with\", \"the\", \"cat\")); "},{"body":"\n    produces\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"list(\"sentence\",\n     list(\"simple-noun-phrase\",\n          list(\"article\", \"the\"), list(\"noun\", \"professor\")),\n     list(\"verb-phrase\",\n          list(\"verb-phrase\",\n               list(\"verb\", \"lectures\"),\n               list(\"prep-phrase\", list(\"prep\", \"to\"),\n                    list(\"simple-noun-phrase\",\n                    list(\"article\", \"the\"),\n\t\t    list(\"noun\", \"student\")))),\n          list(\"prep-phrase\", list(\"prep\", \"with\"),\n               list(\"simple-noun-phrase\",\n                    list(\"article\", \"the\"),\n                    list(\"noun\", \"cat\")))))"},{"body":"\n    Asking the evaluator to retry yields\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":false,"body":"list(\"sentence\",\n     list(\"simple-noun-phrase\", \n          list(\"article\", \"the\"), list(\"noun\", \"professor\")),\n     list(\"verb-phrase\",\n          list(\"verb\", \"lectures\"),\n          list(\"prep-phrase\", list(\"prep\", \"to\"),\n               list(\"noun-phrase\",\n                    list(\"simple-noun-phrase\",\n                         list(\"article\", \"the\"),\n                         list(\"noun\", \"student\")),\n                    list(\"prep-phrase\", list(\"prep\", \"with\"),\n                         list(\"simple-noun-phrase\",\n                              list(\"article\", \"the\"),\n                              list(\"noun\", \"cat\")))))))"}]},{"tag":"EXERCISE","title":"Exercise 4.43","id":"#ex-4.43","child":[{"body":"\n    With the grammar given above, the following sentence can be parsed in five\n    different ways: \"The professor lectures to the student in the class\n    with the cat.\" Give the five parses and explain the differences in\n    shades of meaning among them.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.44","id":"#ex-4.44","child":[{"body":"\n    The\n    \n    evaluators in sections ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" and\n    ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.2"},{"body":" do not determine what order\n    argument expressions\n    are\n    evaluated in. We will see that the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator\n    evaluates them from left to right. Explain why our parsing program\n    wouldn't work if the\n    argument expressions\n    were evaluated in some other order.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.45","id":"#ex-4.45","child":[{"body":"\n    Louis Reasoner suggests that, since a verb phrase is either a verb or\n    a verb phrase followed by a prepositional phrase, it would be much more\n    straightforward to\n    declare\n    the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse_verb_phrase"},{"body":"\n    as follows (and similarly for noun phrases):\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":false,"body":"function parse_verb_phrase() {\n    return amb(parse_word(verbs),      \n               list(\"verb-phrase\",\n                    parse_verb_phrase(),\n                    parse_prepositional_phrase()));\n}"},{"body":"\n    Does this work?  Does the program's behavior change if we interchange\n    the order of expressions in the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"?\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.46","id":"#ex-4.46","child":[{"body":"\n    Extend the grammar given above to handle more complex sentences.  For\n    example, you could extend noun phrases and verb phrases to include adjectives\n    and adverbs, or you could handle compound sentences.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-6","body":"6","href":"/sicpjs/4.3.2#footnote-6"}]},{"tag":"EXERCISE","title":"Exercise 4.47","id":"#ex-4.47","child":[{"body":"\n    Alyssa P. Hacker is more interested in\n    \n    generating interesting sentences\n    than in parsing them.  She reasons that by simply changing the\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse_word"},{"body":"\n    so that it ignores the \"input sentence\" and instead always\n    succeeds and generates an appropriate word, we can use the programs we had\n    built for parsing to do generation instead.  Implement Alyssa's idea,\n    and show the first half-dozen or so sentences generated.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-7","body":"7","href":"/sicpjs/4.3.2#footnote-7"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.3.2#footnote-link-1","child":[{"body":"Our program uses the following\n    function\n    to determine if the elements of a list are distinct:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0CYBQuAzAVwDsBjAFwEsB7E0AEyoGdryKAKKigUwFtmASlABvAJC5QU0ACceFIjPosA+iSIAbDV14DBk6YekB+UBRlEeBo4YBcoVeq0cKAQyrbu-IfptHT5pbWfqD2jprafPwARjwyHAAWPK4MOt6CADRm7p66Pr4hUqZMrFTsLjlpegWF9gSuGsw8ANy4AL74JWyUHBosnACMWdhZKKNZAKyCgs1AA","body":"function distinct(items) {\t\n    return is_null(items)\n           ? true\n           : is_null(tail(items))\n           ? true\n           : is_null(member(head(items), tail(items)))\n           ? distinct(tail(items))\n           : false;\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.3.2#footnote-link-2","child":[{"body":"This is taken from a booklet called \"Problematical\n    Recreations,\" published in the 1960s by Litton Industries, where it\n    is attributed to the ","tag":"#text"},{"tag":"EM","child":[{"body":"Kansas State Engineer","tag":"#text"}]},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.3.2#footnote-link-3","child":[{"body":"Here we use the convention that the first element of each\n    list designates the part of speech for the rest of the words in the\n    list.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.3.2#footnote-link-4","child":[{"body":"Notice that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse_word"},{"body":",\n      \n    uses\n    assignment\n    to modify the\n    not-yet-parsed\n    input list.  For this to work, our\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator must undo the effects of\n    assignments\n    when it backtracks.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/4.3.2#footnote-link-5","child":[{"body":"Observe that this\n    definition is recursive—a verb may be followed by any number\n    of prepositional phrases.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-6","count":6,"href":"/sicpjs/4.3.2#footnote-link-6","child":[{"body":"This kind of\n    grammar can become arbitrarily complex, but it\n    is only a\n    \n    toy as far as real language understanding is concerned.\n    Real natural-language understanding by computer requires an elaborate\n    mixture of syntactic analysis and interpretation of meaning.  On the\n    other hand, even toy parsers can be useful in supporting flexible\n    command languages for programs such as information-retrieval systems.\n    Winston 1992 discusses computational approaches to\n    real language understanding and also the applications of simple grammars\n    to command languages.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-7","count":7,"href":"/sicpjs/4.3.2#footnote-link-7","child":[{"body":"Although\n    Alyssa's idea works just fine (and is surprisingly simple), the\n    sentences that it generates are a bit boring—they don't\n    sample the possible sentences of this language in a very interesting way.\n    In fact, the grammar is highly recursive in many places, and\n    Alyssa's technique \"falls into\" one of these recursions\n    and gets stuck.  See exercise ","tag":"#text"},{"tag":"REF","body":"4.48","href":"/sicpjs/4.3.3#ex-4.48"},{"body":" for a way to deal\n    with this.","tag":"#text"}]}]