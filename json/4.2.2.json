[{"id":"/sicpjs/4.2.2","tag":"TITLE","body":"4.2.2  \n    An Interpreter with Lazy Evaluation"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In this section we will implement a normal-order language that is\n    the same as\n    JavaScript\n    except that compound\n    functions\n    are non-strict in each argument.  Primitive\n    functions\n    will still be strict. It is not difficult to modify the evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" so that the language it\n    interprets behaves this way.  Almost all the required changes center around\n    function\n    application.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The basic idea is that, when applying a\n    function,\n    the interpreter must determine which arguments are to be evaluated and which\n    are to be delayed.  The delayed arguments are not evaluated; instead, they\n    are transformed into objects called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"thunk","tag":"#text"}]},{"body":"s.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.2.2#footnote-1"},{"body":"\n    The thunk must contain the information required to produce the value\n    of the argument when it is needed, as if it had been evaluated at\n    the time of the application.  Thus, the thunk must contain the\n    argument expression and the environment in\n    which the\n    function\n    application is being evaluated.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    The process of evaluating the expression in a thunk is called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"forcing","tag":"#text"}]},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.2.2#footnote-2"},{"body":"\n    In general, a thunk will be forced only when its value is needed:\n    when it is passed to a primitive\n    function\n    that will use the value of the thunk; when it is the value of a predicate of\n    a conditional; and when it is the value of\n    a function expression\n    that is about to be\n    applied as a\n    function.\n    One design choice we have available is whether or not to \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"memoize","tag":"#text"}]},{"body":" thunks, similar to the optimization for streams in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.1","href":"/sicpjs/3.5.1"},{"body":".  With memoization, the first\n    time a thunk is forced, it stores the value that is computed.  Subsequent\n    forcings simply return the stored value without repeating the computation.\n    We'll make our interpreter memoize, because this is more efficient for\n    many applications.  There are tricky considerations here,\n    however.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.2.2#footnote-3"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Modifying the evaluator","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    The main difference between the lazy evaluator and the one in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" is in the handling of\n    function\n    applications in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tThe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_application"},{"body":"\n\tclause of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":" becomes\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":472,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokdpSWWgD6ZhZGABRGAB4ADgA0xiQmAJSgAN7YoIWgTEYUREyh6kxkRpGiCTGWFPFJaRnZWQDc2AC+gaSU1tpU9BSRNASRikwu0eZERvQJKfTpRpk5uQCQBUUlZRWSisnLyaAAvAB8YWXmc7GnaxtrK1292EGDdMOj45PSRh0+iM0imMyWrVW7U2OyKxVK5VCrGOpwu1wBQLqFEe0JeyXobz6HwGITsyWSWn0cSC6WmLih62yeV2clAcRGkWSTCorFEVBMtU+IWppCym12cP2iLJFP0nO5vOoAsiQuscQlcM1mppoA1Wv1WhGYwmYNmjUWcTpDI2XX1+vwZDEilcIN2PWMWnoRlArPZ9EijlYyRopFBqroIpIYuZWscDAo8PoRC0CfOxkayniertOaK4ZIkQARjIqUEsqls7mc0lmiRQYyqCwSKx1tjK1Wq-nOdNFC3mkwlmWKx2R3DDb8TRjFMDQVbLeCntl0g6nS7pO3R3mSdZIg2my2SNiy2LulqpYcOeeC+a4iUkymshu4QB+eEHa-zWpx2vYu-JiiPiOABcoChkY8gkCCp6gO6gJejGmpGEwLBMJG6QAESkAA1iQNBCJU27fBQ+jJN6AC0ZEypS6FvIUfREvm6Z3HGsghOYcSBsGkGHouMK7FePr+hQTBEOIVL2LcUQ3ixfJ0HcXIggomYcWwXGtuW0KAXar6mPMykyWxURxl6ACOCyHipQZ0OpvEbiBukWPpdCsdYdzmP2JBWAKllqYeGmMoS-TBEMDmRKZ5k1HEoysBQ1pMvkcK+hyRhBsRYVGGZ6yRdFsXRgl+oCWBEFQRqsGet6SX+jovyjJmB7YjlBLinaAkOU08TyAOYy1c09VRRQMUErx0F0R68H5bGqgJp1NUDWM5oXLqHZtcpM3dRQdWtv1g3+RsI2apVkRXvcCzUo2s0xSdRh5U+hQCWtYVzVd+1wmV423W+0qheFWXxHe62bYeSyNbt2QvUUfSve8xLBd89BKAWIZjACZA6EwViqD51l+Qhd0Ihe-o-eQ8ScdjAG3a+9hkEQrDJspxykXWw6bnaJDJlozMs1qyInPDzrjKJkQo2jGMMJzXN2kTNSPYDsVY9xAFirdIEcsLPbCqTCtaTmr7jtiavoyEYX6KwxZaPL6na3aIFs1oWjdAxhGhKFhZaDQZBYRbPHQrjoDGQmxbSIYaau+7WFFiWXsAft-vaO75iMGmfOI4LBui0sgf6LRRSx6Qij0PQVAuJB0iJz8xqTHnBdFyXcRu0onrZ3j75MY5zRxJnLy1vWmSNnQfX1wn4sSyPcJV4XxcglCH2jyOAWBYxet-JE481yCUUm2bBK+wJPMb6bNBaGioDoQAVKvk-SKf6HpPQm+HwSDtBV8zsxEd+MFj1KVbZrra8TvH8jhYVqMdG8K127HVaHeQuEZf5+WHrPZaNon4wxfq3KY1di59TgRQf+E0-ZTVAAtNM4D4j5wns2VsV1dwpGgWqHB5YZ6jgCvtchNdjYHykp+S0mDKGHg4WbKOGlzTDQ1AJc0KDGKhTThrVSZM8EajYcXARh8rrqjtDIncd9OFCPSO2UhcRNF0GoVAxYMCSC6NxPova-FAFFSoCXSRTtBK7gzM0UE4hsJxBoIWAAVs1PYgCOQbRcC4EEkQ9beL8RhUhHixDYRok-RiniSDhzAW48JKSsKbCWoEluYgjCKGkHEDaVBzaxMiFkk87xGJVGlvUHx-jfaHSyVE-xATJrxkTP+RaEkIhqKyTQk4jSNKDMZG06pktSiRAKUUtpMSMlxISU3TUXoxizOKaU82Iz0h-gfJ0Qo+ASgUnsN6VooARDiB9LFIhn52xrMqYoMpJSnnbL8RpW2WhbRFHwFUMJCZSCQRBCCdo7YBJ7IoJ0WEEMxoVQIGyZKizKnxNSRMjpmoBKDJvCM-ab1vT4MlIAxpuLoaMSnHKeorQ8HQubtKSJ6Esk32MCkURfRGLBJRZ7EZeQ4RiKCUJRQoTwmRMaRhRlC9nFjJSCUzlOSBIbJec8qptpHaw1CGMzIMrsJysAQqrZirzbKpVbgX5Ts1AsHYFAbw3B0D8ACKg0kwTBVhNBJEnB6RxC1BCeigSHJkhPNQgw0AAAyYNoAFVBvOFG9wBTHkuCcWqlxhp+zsSDfg31AqhWuqNFHDCyakLmESTU5x+b0ZcIeGm3lhL8mFM2a8oRgUHVDGRMAiJogC3m3ND6wB9LS2FvSF2hNaCOSeRbEIgBLcnVZrbaMXNJ9R1GCLaqtBLbagLv3mbbtLd6ULqZdozdQ7ST7tUSaddaa+U1rmfqhhjb2X+iUXw7E57q3SinS6mdT65EKwwg++qS6m3fF-VQ495tn15OlHq+tkHnk3uqWy5xQH+HmiGXQ2BX71ITog7Wg1OHYOHqGKrIwqN1b0PQzjdN-K43vrdWR3BJ9-bOmRkRkWIQaKgAAD7sdum+4VOb3UnzMNyRQrtahGJIGxzj3HM3Ub47RjCXYxP-oA6EMTKjQO0a3dKEDy913QfU1ZLWcHlOgFU8h0x1c0MGYwxRy9dalX1rw6S5xq6AxTUY0LZjJGIwLoHZ+FDZjrCacOPShj-DFPpB87c2I-mLNRnw98DkOhTbSEUDF8x46bOvuk7x2d-H0JJcLCltL1h-2L17IV1L-r0Z9iQmppYYHaWHD3tp09vYjDpD0w2iViaCtFczhli9WGr31uvRpozxmXO9dS+Z9LVW2v9ihJnILoRe3laKzNkr6Q5s1YHOkJb8XQgcgU55w2pGrPka2FW8DBMqM5c-eduj6FjvEdO3QUrzjnssZ3GejTmHgtGnfgQOdvButoM+15gs23ShIXq79zL-3fglCB-xjAoPSTg9ewWfrDXPoI7GEjudABmNHQxPuVJoK5+M7nhYDZfU1xQrbQtMZe6LdRo4Mei0iD9h7jDNyTbW9N2hAWIxMO1E7DzLOjZQ4W7o0XcIOdG2x2N29zjLwfxlr1H+cOJQZtu9m3LcmT7HS-n+kn3xIFC9i7TxroROs3oOy4gyrl9O+QAn9w72X9f3ddxhJ3ckogbbezkSTVYeNe7nehP3nkogm9bO9xNUf5IlFkEoduDWBJLwJ-xkHSTnGJ6MqoDK5lvdkw6RngHWfDeo9zwn5yslo9TBTEhTySoSba+uytiv4Eicq8TRyKW8Qcpl8oyEmTs6coYQH-HtBA+NffyBttN3uQig691dh-VQ+zeVHOgDTXFkQa43ldhkGNe0H-Tn-VYGc1t4TUxfWk-xa+-+hSskNKA-F839X5O-0nyP9b6TfnLvvPg1NfsPt-lzuzDhiDL3sOv6KHB7Nbjbi4qPndhHvAVhNPqSOgRHEHIgbjrbuvg5mNqfqSC5ugf1LLMtuXHEOhOgXuhtHvtHE5k-uMKRIbBoK5qbA4qzmmpdivnTh7ivJ5EwHKDQGwcoBwYGIWNwbIjzhxlxqHnAdwSIawQWh4EwJwdIS3mdq7v-hyHnCoWIWoZIWwFoTwXDnwYUINjdigeHnlgYaIeIeoZoTISVnoUocIY4cYRoVIa4ZZroXkJYbkkgWHh+mgcoV4ewT4aYX4eJv-kYVEWpngeXojt3tnv-g9Akc6MUjjikfjmkVXv-l6CxKoejHWMkT2l3sjobsTg7i5gzIaKnmqF2IHiQLSDMDTFQq0Z-gIdQehA0UpKxggrmC0ZbuYu0S4J0fwt0TAaSFkc4b4docYh4FMOSI0eYXIfgrHPMRoItDsRoSBkIvtLrg4aURIdEVwUsRYgwhTEArUAMU0RGC5uuvsbzoggaDmpkeIeUbBsrHcasRSIMWqM8W1t4k4RoG8e8ZqJEl8QWj8RpsMVCXCMUc5GcfCTzuNnegCesbIQEbfiPs6qgXlg8aLJgaTuLq0YgUfsNjBsQY-mgnSMVpjOnmvjSYakQRiY2qamquamwF4FwL4HwGgITs-I6kJCJGJHEIkFQRyMWIfIUhYtKcEdpKAIkH8UhChFKRhHKVoAqcyqRJQCCLskRkYPyCCGSQlv6AQAnFSEqcvgJAAITIESliC2nGoTYM6ChOxxDS4w57YlgKK9EhZyKhgqhOxMq+m7agCdzQgkEEb+ikyhn5jUgyme5hEEC+4hl1hhlqoWkERqrdjVbQ4Dgpk8p5GA7UjpA54wSinkkFn9YEA6rbpVGVmgDV41nGYtG9z7hbSNllmVGpFA4ZmgC1EdmMQuagLcLfjWbWGd6zroSTmxBMrTl+RxmWnvzvhqJdru7IGEnh4iJG7q7mh5n4HUIrnYjbnw4EFslxBdqzEhTkBuyFyuC7jdn9xbQBT9ktz6osJjkfY74qhFkJAbBflDbFK-lEixyeq7ipRyh7jvmHiLSfLdAemtoEBAUgZQjmg374GgD+qNgboPy+axCPx-mJroVtZ1bUhFlNlgXUVtbum1JFlXSDg0WgWHD6oUUtiMXOI1jrA9wmB9yPqEWejEWLb5y1CflXnaDrAuDiAiXbxRppi6muDyUxAEi3H4WoQuZcWD73yiVRZDTRkSWvnZB-EqVyViAKU5AAA8MlqlVl6lVs+oOkyEGgNBHgngyIJAhgdIUxNySYaxVAIIIE6EoAAA1MqZuKMNyK4HIFSJhTkJFUymFZFXLkUDFQ4i4PFbeQnErFWPZG5ahAyjQJ4AQEYEIHYB0ZfqAIFYCSFSfBFVFaOJlXFQQAlfpdvMlRhE1elYUK1dle1blY3Ped8G7DQFhEQMkGpmoiBoGVuImoyBEqVScFJe2IxMnApWJeii1JRr-olX1aADpJkMtWIcBajDQM+bMPBcJfPIdSBCBhcNGgqgdSPK+Aqk5fdbVQjFAZ1aMvWk5SslDHaL6IyE9WmNBS-mlDdfVDtfqBqe5XNSfKQMWKGKALukDTCnBPih9LHLpYtA9LpcBWDB9AJJtbpVRbpRpBTdhfRdxZjXRKVLOe0KdatTYsuqSA+jNTeEjTEPNYUFIideNWzfFOtc4ptZhdtb7LteAftX9YdcdSYKzedU+VlaZUJX1HdSPA9fpeDeGsfvLW9bVdMh9UPFFs5aOA9T9Rvn9R6gDXlQzTBM1YUKDZkHrZDbBerT2eRh9AjahEjZhCQKjXWOjW1qABRHYLwqbuDKNNjdLfqHjUWQTQBUTSwqTYAuTcxZhXTddOkDTZ+KxQxY7ZDBDMzUtcLcTVyWAPmLyZapwD4DwPwCgLWeuVyDyHyMqMmWWDuaETCaQBhG3YqGaUpoxIPR3bUDyBSMAazt3faayXZubMeAcpBYQmPa3jmS-GXJEpWPShskykUBsiOJCWODmgyq8vvYUFskfcMfSlpRfXhQGtfTvafXrPfXrE-R8fOSOuzEyt-XbLmMfUUPSrIPQCcvoEyiA2AwAzfafX7RfX7R2IA4UPSsiOIFMIWPQDfKg2IOg4wHaEg30eFffUUFqaAFnMfIkE1YYKAAQ-SmRMQ4UKQ+Q1cKqeHWQ4ULQ6fWRA4RfZQ3CCw4UJRHw5w-OdfOkFqEwzkCw5Q6fOwzQzA-OcAAw2yIkOkMw9cJQ2ANQyI9iOhAAKTKOSMUOgB6NyM6M0FKXENGPSN61ZwKO6MOlRpWOqNkNSMaOgCONph2PP3zk2WGMuPqOsN2WFDeOf26M2XnAMPWPuMRMhPmPoSXD+NqNuOsPXBxP2M0GXCRPiNwjROpNpiuMZPoQOnKOsP8NpMeNFDSmVhvCxxr1mkb1GyYUXAah7wbJbYKjj2NPWCPzYB1OdPr1diNJEY3LnCtMohBDHy30DPD0daEHPLHgEN4UzOd1mpvB9Or0rNfhuZAyLSRL0r2IlxMqHMghLNIn0qQAkAQSiDgPiOXPXPERnNQkoPKA4OwCQAX3YORDvNPPvEvNoMACi99XzALvziC9KAAcooBC8o1CxCxbUiTQ90P0+3evUznVi03CHvGQMfBGhpPU8qEzr0yi0PYSzs-NAXZi0UNi7i-M6BmKB06iw00S+s4xA0XKAS16WqmhFVS4HrFQey3UAWGBEwJSGrb4ooGYPDNyK-mziOJy3UEGLqfVDPaKBMfyw7mslNV7QhdiFQXxdmTDVtAzPxT6Vs908YpLYdRLAq+i4lYiYgia+UQq0M34iM9PIi1WLa+SyxWCxLB7a-nBW+Y+o2lBbGnyz4ncEa4hUnAiNNdG3qyhVIhknOmtR3kmu2mWkIk+LrJm3cNJBpk+CrD-qCTcbmLrKVZNdNdpjzfpTpqWwidCEWy4iSbiaXjm1ROJOEPm9wqMQpFbgwrxA6zmIyd0ZYgFM2xyPsS4Vcdm+W63O1GCd4TO5zisa2zoaXrZLmMW5Ti5P7nOzrOgvnqmxsJO1VALkydcYW-Ozpd6VNoWfNrVtnYO9a1qPe0rjzluzmDu+-mW4e99EXr9FFIB8TBfq2LDp+029uy4uQX+yqS7PXJ7PxhO9B2rpubHhZHBy5egsbgwcASe2Zah1aeLmJge-Bym2TiseizToO1B9+y4qR1h1qDpG-Ix4bih-RxyIhiXlrB26FNxwRwi0UIVZqfYakrhPhLVfoIeIoJQxHaQkprHKwByywC4NVotFVl6DQbwAcsvsJAsAcoTsvUWgYsp-KDQGp72B6rGlDUG4Jd7dHEAA","body":": is_application(component)      \n? apply(actual_value(function_expression(component), env),\n        arg_expressions(component), env) "},{"body":"\n    This is almost the same as the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_application"},{"body":"\n    clause of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    in section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".  For lazy evaluation,\n    however, we call ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" with the\n    argument\n    expressions, rather than the arguments produced by evaluating them. Since\n    we will need the environment to construct thunks if the arguments are to be\n    delayed, we must pass this as well. We still evaluate the\n    function expression,\n    because\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" needs the actual\n    function\n    to be applied in order to dispatch on its type (primitive versus compound)\n    and apply it.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Whenever we need the actual value of an expression, we use\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":498,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEfSoY8zwMkyNxFvicT0J+uQAJAwo+ZRxnEURWaAAC8AB8diUJY1zotEVmfl8BL0FpunYL+dBGRQJkYTo+hGNIeqMpZYW2TkDldE5oSsECbkEp5Pn-ollSiIVcQhcYYURXpUUGdYdjAloiJBGkZk2WauQdHIoBRAshJUKwohUCYibRcRQSZNkeTTLlzUIhmTDDaN41Jo1Rq4Vs7WgNt0w1MZTypeZgVFp1n5aeWBT4GQYiKK4yUdDpxiFkY8wEP1VprKQKWTdBJAzT10woRQoBEkQWhgx5alQft12TZU1ZtaQ1Lw+W+I5jauIZFQLDcckUTo9dBSI5m9QrDmTBFtNpYkyTh1xcdpWKElKWdUiaXVbd92PdIxO8oj3x43QLHTTN2nzcUT70blaIWNEENQ1+0y9HLNwask15Kz211zL9RjyC00iS6AL1GG9wNTHUQkA2k4kkJJ0mhJN7j6IKymqfq+gaaben1a77Ga+6dCetRySZdl4PS85CwUEwRDiIiyL+fLGJuqNoeDGGshgl2nKXb2ZGQasNqZ0sgwoWOPGgfWi69nM7El40Zd2hxUN1Nq43YWa2kB5toRB-Q1edlEqGsBQXWLlbBR9QNVRGPEFD6IO463BQE-hbNjYLQbRvJabBTm5bc8LDoxmoVehPj5PQNzVsC1N0q8jU3Fl+vteN-hZ+h9m69w8zymKDQgeML4bzijcTye0MbDGfqAt+U4P7X3Ad-XujZT5VHVoFTE8DJwTzTkYO++0FovzAfgm4v8ujHwAffXkj8BzDyHKPIkCCr6TzHigrki5KGdD0lQyKDVghNXoEoZ8NBE4YUApRawc5a5tEAQtBYjC16sXAvYMgRBWCQyVPCJI0g6b0y2CQSGWgDGGKmPlVyIiHqPAkRRYCMizHmK2Mo4ciZ36L1aLI8ObQZrbWbPYoiqi6Q7AqO+QJIQ8z3CwvOPxZY5jGK0FoPu+khExSDnuA8vFuq0NAMA5GUDMn7CRjIWsciIpdGAWucwjAYbWLEXYzC0j2TIwqZ0YBpBOIkiYslWpsV4qdK4slKI1TCxtMKDHQesCoLI1CljFKwt8YsVGTZAWziyyDO6cbLqaz1l0kXHVQRsFQiMwGUsIZ0gx75iuOFBRkyXJXOicVMSAAqTZVAenSBeaJNIdwCzhRSUcwyQc5YeJYtk6euSFr5QTJULBCs3LTMVpM0MrJIzlKcXs66BzAWBwHF0j5BN3wQqpIA4BkCYZPyggSpib4CGovDGyYisTMVYu4TCGlz4-kPBuEiLidLuUxIxaAG4P9HL3IoQIvFqIInop8ZlDlXEokFgIUTP4sq4KCp7o2Kl0QNXPg1lZNFRoWVmlZWgiZ55Qh7wlAfKVA96K6pSuICSypzgACtt45XuXHRQLgXDJWqGEt17r7ZOqQmICSvtIquxdY7VV4a437FmtAzoC0xBGEUJcqcVAsKJsjY7CWMaHXqCYBOCqNAPVes6BgiNrrK2eurSDVQYMdZQJTqiXlSbQwhq5N274vbxlTGHnFDNWaQ1hqRc6gt+xo1-BHZUMd2bFC5t7WkHWV1QD4CKCCew713IiHEPMSeIrAqNgXTmrCl612gESVoTdN0wCloDWDUgLRkrJW5Dve5OtNJRyPv-d6tb831qrU2qYC1u28obUO6h71cneqtaABtv9-apOOaAFmK8KrBRyf+6OSHGZRFEkmn5NUqpoL0q7OOM7e25C6OKpDvr-WBqIw2+2pHDmxpnT2pNKb02ZuXauvjV1+5pNCP2jIUQ+P0YE+O69CmZ0zVE7gfAk01AsHYFAbw3B0D8ACECpqzGA0pSI9k8QiYpwuHA4oqomY8Y3lAAAMic6AJdjmPKefcBmpCfrcUOrPv0MO3YbM+qqFZkzQbUIiVEjUKm5ho1UYdXFoUAUEWxPo50RjMt3PXtiYcwzMUYWJhSwMKINxQuEeDbFoLWgyMVf8+J+iSwViOahWF3zLHTPBuyaJFrRhEvocMsVl4rXBWVZlkRvrrwyPjcaxhwV8V+ttey85XLK6hU+KLWJjDCxOXgvKXcpj4W-WRbM3I+2+3WiDddld9CWqMvtaQ+t1dL3NsheUyk27-LWj0qNYyuVIWjs5cE9JjbYPV35YK9R-CTSHEmsO09mWxnWM9Yu2JUGD04r6o0qAAAPnj7aKPuvRd62YFaihVyJhx9kAnROTtdai8S9HolEY0-m4ZfVyqrgrcQzLRbx1ltvZvNtwroQueGpZADhHW3gdrdBwp8HUOOdNRG5j9C+qoj9bSJLsMEY6ATeclN9X2O4dETI9r09CsGX68BirmKZ9lhphDP923vO00dYi6j0nLPKwu6l7bm7yWnfpnJtmXMgrvFA6R85SxjyVWC9eGkYXyvi1Nb9yUms7vLUg-k+DvL5TRdi7jLCjPrumVRDD5TOoXVWly5OdVsvAemVkar8UGvaRWn2-KFUNnZuqLR7sgxvnscGdnbR-KsSfepHw5IEHpr0-CKROW491bDfjJFAICJXgXGS0D0kUvnEbeqZR85PX-pm+RIYF3wv-fXPkbZ4I5NsJcLDYiQAMw34w4vpCNBNaXw10wkf2hXjETBNwP2aWImJkX0gNG3zkdHNS2BGybz1wr12UIDv37yPyzGr2pmwnQJgNn0zzKS2yLxh1fytRfE8UJlXw92O063Hx90n1ElBUQWoIoHnwwzlnL0BzP1oTkyE3e05GhwCyqAzjbmAM91O292Z2YPEI9EGB4LoFxzpzLGJyZxi3kKzioLfE4MMi0IrmWmSgUCVFoJzyNxf0v2yR3y+wdQMNdFUBHlkOj1+AWlOSsPR2v1sKa3sPbipi7ngImBnjcMsLf2yU-273olcVHhvibVswYJkI4QnntmiJHD0OERHgnDBS8SSPkRyCyzoNz0ENyNF1dlIVYSQXfC-jiPuXc2qO8K4PDAqPYKLGqOCPuWvXqLT12wXiXhXlSPXk3hqPoLvVyIBW6MMkdzATYTGOGORyqFGM6M4REKawWCKUkPoK9xJ2cI+HtiKXSJiiKWII2KKIhyEMdC-2G1AKRjXA3GyI2HPym32N+TYLfBWJ6MeEFGAhFDFAlCCUeyHwKMKNH0qE6SYBXhVG+PVF+O1BlyB1UN5DWL+PBM+NVB+M1D+IH05AaMmKqDBIhK+OFGhIxNhOZUR0BIKDX3oi2I0N63xNRKhI1AuExOsAOJ7yRmRIJLROJOZNJLawpNTXMPZJpPO2YK1AZC5MZJhPN0uKakhKJO53OKCJj3Xzig8MnxsImKanKIZIekuTMKFIvzCM8NlJimHjdF1JtBOIsI32NMnwiPtSaxG31BMPBCFmb2sA6kZE0V+yUIYEN1VOIxdLBFZMQJ2n3z9K9JcB9PQj9PGJ20MnlLVCZPFMiV1GDP+MRxhGASTI0CgVzPVAe3KV-niPpILJTJZLhJlDLF6GdJaldNJBG2WwLLRixTpCIx1PlKtKh38RL0TAzPBCbNeGVEJLVFbLbK2A7NwS7P1IxXQMMXNLoBShnJF3eNxL1HrJDKrMdHaM2OkO2JiwHNZNNJdgjI9O3OVNcNqIVyV0LxxKajMhtyZVPx3P4OvLz2E1vNIIKzUwHg0zYC8C4F8D4DQHfyGyM3CwTiTiiDxADPokuCuEzWIlgsFL+F6DxF7Jtg0Bgr2L2C0CQvIwAhzH0WjhHDGmSjZPogIBqURBQvyIWgAEJqSoKxBaKVNi8Rt-pj8O9QBZkckqTjcfpsZJpW8cD29qZO9SkxUktVixChK-oB5MQ4L1COz7ZpRfoNpxNKKyYxKT8lLZN7l3C38CA0gbCzZwKYpEYH8CB+NDLQit8TLQAvDzLi8hZcYllrwbKDKqtbSHK0gIiXLXYRt4V046AsY8iBLqsQqBs0hrRwqTzZYUVeUKtz8VLg1RUxJorKLorNZwrytAo4LhcKs1ymphxdgSRXAcYTARYiU3JSV6KOjwduFAqS1cECAKYgp6qn95dx1mr6pgELNcQ+iqqaq3woE71tIOLrj2rhzI8dczpbKkN7NhI5qrcRgAUWqF8OrFSaYOrFrTiZqVh2KyjtqLJMQ9rvKZZr1DrCFNJNqMNMY9ERqPLr5rlCx5r3reLOJExIUBKkgXBxB48blshPMYZ8LXBAbwhwptpehlqohOKOqgbPqoauRzhvqqqVYmxtB-rAbI9sgAAebGiGsQfKsZGGgSW2EjPYOMEgQwMyGMk9egI4EEKgZKOYUSUAAAalQvplQhWlcDkERDxq5rEnthFvQL5olBcEFtJq3kwsEmwqps8AICMCEDsG9LfEYCZvrLZrEnFvWUloFoICFretuW5rIw5u5olvjilplpRpKpil2AOCOEVNVUFQVS6EDgyGqD2Fcl+r+FdnqSRq6hRsAT+HiNGLxvQPlG9qdr9vIHKqluetFmvAOXQLmEFU8i8zqNNsxvAncxRvTtACDs6NzrSGvXtp4SPnQU+jqpMCzphkGsXjiGXmTqJXAz+CwpWrevtlIEuF+lvRmyHSoUAzDq2GARuqgR1JurruHofnuSDpup2vOteC5CXrOpuqLT+D4V4SpO+B9oFFnsiM5Vdt5Xdqtw9s6C9pMAPvjqyDHtJgdSDtWtDoQ3npGJMWDrzpCW5FvrqsAhoAqqZEWRTsJjTvWQzreobrc1ByjvWV6AXQLpqQ+u-otGLtETOK-vLvB0rsbBehrv6m+GgabuGpAfbofutgVu7uiV7pIH7ptEHpWE9jsB+2SDnS2DgwocqRbWYFeCnrasRvZXLAWkXu2sjxXqOrSHXrOgkcITnurv4RH0Hljt9qPoEV-PE3-K004B8B4H4BQAsvZKGhGmoHWn+mmlSrH0SN2lEmMbWgGwdtCDsdMcTGGhBHYKCQsYauexvNXXFjuv6p4ecfIs0uOT6SIxjCmyXTI06CXWunHIrGq0vRiYKEvXidZSm2WpSdAGWvScicbzCWycZjycnOqwWDvTI3KZMV5ASa6Cm1kHoF3R9jSAaaaZqYyeqy7pSa7vLFqc6Cm3ynED1HOHoB+UGbEGGcYD+D6YKCm05uyc6BwtAH0BBp8kUm5sMFABmdimIyUgWYKCWZWeeUUlUk2e2amyUnxJScUi6G8k6FUhufOeq2+TSGmEOdWdAEUheWWYKCeei1EmAH2f6jxDSCObucUjADOY6f+YAFIgX3njnQAYWfmtnoX3xRJQaFmEXwXoGVm0XiMGLPMsWQXlmPnFJCWYY8X8n-n8b4WSWwW1nQBCaCgqXSmaWPJ9nsXGX8aYZSX8XRIvI6XQWyXQAfIWW-n0WvIOXXmuguXPnRXeXWWDpqsGKgX5XbmxXQAmKChYKYwIpgFgmzH99I9PIYQ48l00hDWJo-z9WgmVoTGQnEYG0iLakzWCoghnlMn7X7GyNhdxZtmcnvWXHQmQhxjsADWg2QmTdwng0psbVjYyN43koA2JzZnqtIASAjZRBmmCgM2s3l4U3U2BnlAJnYBIAUnxnKgy3C2Jzi2hmABRbJyt+tmttsqbAAOUUHbaBc7fbdQb2VtYYDBitf-zQjflNtNa6DjzIGeXczIC5BHejcHdQkDdWmDfAIsknc6Gndnd8ZiRmktcjfWiXcmtuxahXhHfMdICjMZjgu9nKmfANiYFaiTvdUUDMBERWhbrVRJhHbcfwrfE8dRhvbCUceLulmODIZYjgseuxig+vF0StMveNdNrDNTc6EXZbSxx2tbecUQ8uWQ-E0eA9RdbSHnPMUw6Hew4slw-MRIZbpXng42EBQGp8xcF2DRsUPctAehnA5KEg+49qoimLw7TSwxFw39uBJdg0HLXfF1UqkukBVE9VXJmHmI14BFowE0g0nLrY449RCY7aE0iAA","body":"function actual_value(exp, env) {\n    return force_it(evaluate(exp, env));\n} "},{"body":"\n    instead of just\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":",\n      \n    so that if the expression's value is a thunk, it will be forced.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Our new version of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" is also almost the\n    same as the version in section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".\n    The difference is that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    has passed in unevaluated\n    \n\targument\n      \n    expressions: For primitive\n    functions\n    (which are strict), we evaluate all the arguments before applying the\n    primitive; for compound\n    functions\n    (which are non-strict) we delay all the\n    arguments before applying the\n    function.","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":482,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChsDMBXAOwGMAXASwHsjQAbCgZzIH0q8WBDAJwHMWAbpzoEApowAUogB4AHRgBpQoogICUoAN4BIbKH2huosgW60Atp1lS5oALwA+UJ3IFhg4WJuylK9b7lGNQBubABffGJyaloGZjYOABNROk4AT1FErj5JGXlfVQ0dPQMjEzNQS2s8+ydk1LSWCjJvAv9lQJDw3BBQQlJKGkY+7ipzCBh4JFQ0AEY57F6Ad2aAC0qqRIo8ChJOQaJhvCpuek4ALzTlIRF9mMWwFxITraJeUDIqCbhEZHQsDC4frRGjXTz7UQSZ7mWQ0FRkNpFEqGYymWhMFgMMiibjCKFjWFEeFqZEGMkAfnozRx7huXmhhOJpLJ+gAXKAMUROOZIQy4UQyCSWSzKXQqFQANYEWQsRhpcwAIyodA8IkhcsVyoSLC5PPxMP5gsRzJZ7IxVlkDD2B31jIFQuFBkpFroaQkLhMtM8kOBBxYeSMjEYMVthrUiIUJsdLJ4-AD4mDQ1DRPtxujbI5jDYshpn24LGhCooXJtfJTgqjTrBt2xEioOdxeYLYyLJZiLE+XFklt2dxoyeJafTZqzzyIWwOeLLTPToEpohuzfHzRiU4JhqH0ZHmO5CsSnH9ckDiaIA-tlf0lMsEtELF9IdSiv3LFkPG5xhxsvlSrokmnqYvWdHUfPcDyVRI3X-I1lEKQDt0YUQAEcxFIXl13LB1o3nRcEOQlQSHVJCUII2UyAhHkBT-dDBxg9Q4MzFgFTFEgJTPCtZ2w9wmKoFi2M3R1tzKNFSPI+E2Mwx1OJVISzBE7EKJaKD+OFbd7xoFhkhIVJGxDKCJOFKS3FrNSiA00QtI7Kgl2YTgBTMrTxOU00GM07S+1PPTAKk+y3NLaiBScslt04IMKF4IgFPErzqy4ULwsipTaP05ycVGbg+NAAAiYgJSIKglloOUBU4aRQAAWjK6sjNETKugiSIBhiZxXC9NVWiSrRSRk2hjm4EjmikOkIXavw1DqoEogOGKxwnVc6Ay0atF0fRuoYshuAIMhVjdD03BVOk0OXScVVkIwtmtNCDQwxFkqrBdwVrGaVxodwx1wlDFP86DRovdl7prQ7ZpelVhGxMw7gES67W+wpQnqkyYve-D1TIcwyEUDrNFJbZQAkDFRBhMhGiR1CJGYNGgiRaNVuIZIdiJRJQjJMJlF-UQOTwXGMVSeIbPksTyfRsbOup1EKn+6qJB2bhebI-mBTJ1GhcRJmDBZlIEJFx03rIPoKBl1hBdVMR7FAQD9Al4bpdl0SFcFoIVcrHG8azbrjZ9fXZbR93haxoCUXKHrPcNpX3dV4V1bZrXZ1W-7ZSI5GJEDEPbfRxWKfDJLw5ZCJme6BqQUKvZTKoTafLfA4qKu4lo4DtEGJJgioqA50SBIAhzAIVJawtFREkjf3-aILu6AHwfZyqMni7YMvXIrmJFHN8eDEb28+YJ+Eq+hsbbqClzzN83Svt3qs4haOedPUjUf3Ek+M2Hug6DhibGtBOPuN4xLFr9gwddAcCrh2H-sxCUjFNiQWPtnP+zFhDDCAYwaepdWAX3cpIABXQyR-2ICFYM4VMhwKpPEdgLBsFxQZhIGBv4MGlDFrQS2tYAEBGxOOf0qh9Y0EipQxey8eHj1IbghmGMl68J4aNcaCMz7an4WFch19lRBFrqtSeci6C1CygAKmkXgxI6jMpKBUUEZ+BcppxzduvBKX1ESKNoZUTgN4WBuwOoNB6kI3bxlCv2PSY8REiLEUYhGcccEyIsdXAKmNSR-wOqbehkIgnxXhO7Q8p0ExH1CUaYR49RrZziaZFR7t3RkIUl+TU80vGgAOo7Mkq0Dr+Mmk1OOKC-JpKsT-fQOTik-nyZWRp7YVGOTNtGGJEgenqQOkk48qTt4RkrFkkoNNxyiHppkWpr90RZhiVkLaOU6wKgAFZUxoYHNanBeC8EyJiJgLQqB7KUJlDZHZVg5Vqs-BGWyiCgKcfct5EoigDMOfXVYohOCJAkGRCg80vmPPeWNF5dTQS9X6lcvZBz9DOwxN8nZ+yUUsj-oGLuusgG7Val4b5STMWZ1JX4cl1DhQIVYIC4FmLbmQqeTSlkdKWAMpBWC+a1z9lKDxXQQUwR9C9CMJaFw7MagrC2hydG5TvSVg5Ty0FnBwXkqUA-OgIQyS9F6mc3WxAiSZEyLRSsq1BVkGCMtNWrNNZovWUNbEmyoWsT5b7c1NjSVOPddnSOmtWkslWnyv1+cEb1HSE0FoeQWk2pWjYs+EhMrfL0R0HwWdugI3Ra68lWgyRdRseik5ZysiJr5bclN4i4W0EpXIUFrrfmrS5aq9V3yYWgHhtWj4rrWECHrTlRtNjm0qpHQ29t9U9XVqOKMcYUAfjTHQPMQEximpFtOecxNiUtq3jIrwbFq0MSvn1uJUAAAyU9oBm16XsHYIB26OwnJWYXBiWIaSlOPtYo5a6S0XOYBlTKr7cR0GeZmrtgHiVQzDHmgwBajnDrVe+tJMKw1duvLecD80Dr7oTZcpNGHU1YafVNTk74T2BoPVmXdP7N2WKyrqGq40V2gjQzqUjKjsNHMTZlejqb2NEaank4h9GyOwYBUC7lCHb78dBOaQpYlr3kcLZR4tG7cOJUyjkhSIGIgI00wkvpCnRMVHg+qkziHt471has5wcm7JjPcSeETVSh3iZbfNFVelkOdusxiEZHkP2Ka-cp9dpa1O0cyjrWyyCD7zxoLVUAAAfBL5tv2qb-epoQ3AKCcCYrePz8WkspeC9RsLzSsomXLpfIg2mX7Pr8x05UTn-kVEExwYTZnb5Vus-V+zR4UmeIC0Z2gHWPPHy87VqaLHIt2T8xIejShevJI8UQDj9cuPTei1pWL1XNXvgW96cZ-WVvSbWTuJ8B4HOTKg4F+uqXQvpfCyBZ8l24tdefU9g8r5cQ8jBg138TX41HOUd+LUQm9uXtc6NpD42JG7mfAAgHddjOQ8k1DizjGEYsY+4d5bEgvvvjBhjdBn61u4YA3Di7fXlupvxz9nERPwEY67RiCrs2FPaHzc5oLD6Qu-s+mVzKrOYtVZqwjIXW2qusb1IZrnpP4hGDwBlWYb2pri8PupWnH4ZaI9WpIhXGUMAq6amr7bYCII65w-LxZGUADMRv4XVp8pZayZEZsHwt0Duxt4NuVfchIDJfRHf1eE14gPWOKc48cwHskJvJea8J45aPBhY-uTNxA6HTOfOu1oXJDeCsZeA9u8VtL-Poa3LMXLPPZBRddrcVTxzBekfDZR+qzzJ2GJPWOh7ovPOSsPYF53uakeYgFeS0BO7fP-2D+BrnrT9vaDT65CdM6vZHqDea7ES5DjreJWV1Z59i-XpDATvn9fheKh6537Rw3++pqH5BkKnEbZIYA911v-XiU7ft4xKvdOgpo4Ua94l5-63Krw17Waryz6bx-6-L6DIhNot7zSCww5drWwpzywtD2wooIGMpYG35NTJxQGUR-4KKtKrQqp4GgZZ7+iEzEwn5NxYEAFKY6gjwkHz4vohToFV5sFMHc5apuZsGZ7PoYgfysSN5N7HK840YC6iHgHPqiFp7d7I6Mpo5hjsEsaiGKypyrYX5k6yH6KV4KRCHEZZj1i5gnDNiKjFh+7s6c4b4MTYLcCNBmGNgWGFjWFNLbyJZj6zgiHWFOHZjmH5juFtgDZIb4EyZZiOHOENj7BuEtgeFXYYRLR2Hn6nZUbAHqbRGBGuHBEJGhHVbsF+FcgBEuFxF5FWEFFkYc4way4VAT7SFl5ZStg8AxFBGWEtEHByFTRlFNgGZn5pGEKsAf60Z75UHPpoE5G2QgriFv5W6K6JQ37jFTQIQzRTHjhKGb7zG27GFNQsYuir4hgVYvZEBKCxgdwJInGkFDZDFJoHHWgj7eKDzHH14xBnF8AXF2RXG7Ggi9HxGVGp6dj3E2EDGgB-x-GnBAIQl-biTZyAHZHQkhEglIbmxXhe5dg9gPH9gsbCYQnhhJ6DyJqTFlEbGeZ3ygDsj7HdhWh+44mkZ4lPE+LAS4bEmxGknHyMlMmzirE0BZAkkzFjY-GnbAmeHXbwHMEZH3al4bhZQikj7sEvFLYN4DE4ESat5jYRG0CxjD5JiN6qkCGqEYTjYPCB6rLTpjDfBTB-BzBoA24TarqUYbRbRujSA6GnZKjKhAqniul-LpiUjSDmx-TcBpQSDSC3Iel0BelprmTOoCrmSiAUCQyJDdEOl3iwIumDpHIACEa0Tp20oZOq3mz6LGJkeOb4dOMsSgjC4SdRWxLQEW64tMd41aNO5ZWuDOEEjsOmzOo4jZLCpZeAbpkhfeLQeAtyfITZJkKZDuqyL4bZCeg5eacxwx1uY5oAe+Ha9pM5hcihi5mgEhl+iua5N+m5TGPUjufg7CEUYke5B57+q5SgX+p5mO6Jji3o+IAoNcN2uhf6mUb5aoqaY4zCwqyxqZ-5XgWGJO9RxeUpEgFSWU4FDGmpTeiSQFYkkF35zeKhkmWGQpMEWkVAwYbwvaV5kU38EhKqWSz5qBwcd432kI5F+pVF9Uf896BMsgRMJFow15AopsWqoQZ5ti9ieA9FZMIOv4+2aopBEhR66UBiklYghi1F1mIl74f2kgqlPImZYmjKmloghZW5PU9F7sGl9F2lFQKqelBlglMgzCWQl53FkU8lCqEl-8IUt438NxkZbwW0YlJSCit6QC3lvAvlNwQQqJoAslEgJZolzlYVmcCo7lva5J7IwVvlBiGgAAPPQCoCFasHBbAuSfOMGScEmp8F8JYEQFcOcQpMMIwNKD2JkOyJlKAAANS+k8LMBZZvDbBugZVtVZS3IDUEmgBdXFi8C9UFVUIpXKAlXpTJrih9CiBLDOAfG1WjUNUMBNVZTDU+JjU9V4B9XiUKLtWpotXtUjX7UTWHVTWUzt5iiSjSh-b5IqItKkgBKqCYjijVCFC1wx5doIK2R+U-gYzxV-WOiAH8EZUjXzifUPU-UEVEVxhsKOViRiIjXsgqI3pALNrQ0+KUjNrxUY2jXFwCEZVKAqrxVsp5zRjOx+DY3doeW0FcUcJflLypSlWvVZTEBKi0ygA8bU22oazsyBrRh-x6WmyTF6VSCwxLyrSA2nh6XqVSxmVKBK0HSmXvjIbRi5xqw3F+BfX1gy3qDt7tJ5JOJc03BvX-XWYG3w3G3Yo23PoK3A3yKSXXH+yQ2sF40iKw0CCG0I1ihI0s08XRqFDklbijXiUM243HUR2SSjXGCcquZhWSXx0qQk1A0UFx0U04WFWC36AsxOyczG0M1sXM0OWs32jg3Cgc1yXiW3I82lzjj83vjlSVR6YCggY612oi1Lzi30WS20XS2zKe02Iu1K0GIq1a1q3GUa3T1aUF2bk032F23fUO1GKTpmkjAWlzpWkzDzAoCGUMSnQUDmAriQzNmrJSzEBDkNEsnEC3Kn3n2UCQw1aCXP0X23hn2WhV5+79DmVYVqnzQAPWV-yf2v23gmQEKJpRhcZcqpoGBcqDz4nMm-k8qIP6A8ooOcm3GZSyWYORVqqnD+yoPChcZnyENnw4NwNk6cgjypr0OPyzhkMshcZbCMASppCpocNcMsO4NcZ12YN12kMCNk6WBbRcAKiMB6ISOrBSPDDRisNkhcatWEMGChlKBpAaCOCgClTtVXCgDKMGBcZlTqP6CaOgDaNqKlSVSGPGP6CmPRGYOlRki6P6CVSuMON4O6JKDCiWPWO6OlTqJWP6DeNcbADmO4xhlWM6NOClRgD2NiO-kACkUTATcTejoAKToTRjyT9ZgV6jGTNjDN2j+TSaWZt6RTMTgT8ToAlTQCZTtDv5mV6TNTmTpU2V+gTTaD9ZmVdg5jxTQToA-T3T4TZODgbTWjHToATgYz5TmUDgAzfjZIQzdTSz8zzT9ZWZUTWTbjcz9TBgrpUYXQ4DWWL9iZUDjuBi9gpIk8XKSgEDlzV9hchi2AZzZ9X9LzfofKMZcCdzVgN9tAujXGTzb9SgHWoD3jkV5zXz0DXQ7zQwusYL3uSLUWMDuGXGtMiyxYmQqa2LSyiQ0LXJKjZOkARA9MzQ3Dfj5LlLRMxLJLjj4j+w8jsAkAmDcjLAbLDLjLXGnLAAooQwKzyyS1xgAHKcBitRMStivp0iKnNIswufOQMu5RbqW3NkiTwkBqJXqZwouquUQKuHDIuwsqs+4a0asGBas6uIFQhjSPOmvPMbZvOCUuiND6sDmP2rW8BnxDlutNCmTYvcCujjUsC7KcBCAIJZYcX+7Lz6s-2RkKT-233vE+uXJ4V0pPWV2h0SBDm2V9wh2RS9wbEevXPHW4OMuOj6s+7k0jVATFsgqluzm-PkBCKVuDzVtot2begOx1uzjl0cWNDZtGFGKsWAosA+vXLuDDvwimyZsygzsKwIu6bUluj9CpsYyeWool2HqOuX2esraO0SH+tNuFyxs8LrsdWElb7ELanz2xibvh0iqDy9AkCrC2QlolD+rswOqWGwiTnVpAserCi4riD4rRJOqQh9tO1+gI4AMVu8L5ssKLstDQeOgVbx705AcIdMmSLEIRoZBZAPvug5ARigCvvvtvCZBof6DHEo1V2jm33a1BrMGIVJxgdCrx2UiIVLjAXsf1WcfCLsgEu4uMxfu93g111AuN3vJ5QFSmnPpEw5jt3OCrvd2bksWKuWgEAYu-koupprNZMGNdBut44iAYyJoUPUhAaprK5KBWdgzCCpqG4UrjuTuJUqgochBAA","body":"function apply(fun, args, env) {\n  if (is_primitive_function(fun)) {\n      return apply_primitive_function(\n                 fun, \n                 list_of_arg_values(args, env));              // changed\n  } else if (is_compound_function(fun)) {\n      const result = evaluate(\n                         function_body(fun),\n                         extend_environment(\n                             function_parameters(fun),\n                             list_of_delayed_args(args, env), // changed\n                         function_environment(fun)));\n      return is_return_value(result)\n             ? return_value_content(result)\n             : undefined;\n  } else {\n      error(fun, \"unknown function type -- apply\");\n  }\n} "},{"body":"\n    The\n    functions\n    that process the arguments are just like\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_values"},{"body":"\n    from section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":",\n    except that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_delayed_args"},{"body":"\n    delays the arguments instead of evaluating them, and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_arg_values"},{"body":"\n    uses\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function list_of_arg_values(exps, env) {\t\n    return map(exp => actual_value(exp, env), exps);\n}\nfunction list_of_delayed_args(exps, env) {\t\n    return map(exp => delay_it(exp, env), exps);\n}"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    The other place we must change the evaluator is in the handling of\n    \n\tconditionals,\n      \n    where we must use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    to get the value of the predicate\n    expression before testing whether it is true or false:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":496,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xg7jrcFCsBQC2LkHCNI1URjxBQV30GOw453nhXHY2Z0e17NW+wU-uByta0Bpx5WoVeHOoXXmMnVsZ0uUq8hC33U6vteQ-51yi5t37sNV0XXQ44QrP+Qv5sjClb308Mk87zPA-vgvhWfivXRd6bxvPjcmJn5Oef70YI-vWdU+77n5U3Fvp0Du69R68nHgOKuQ5OyW3DOfOes4ohXyXlSIB7cYRp28rBWSShnw0CIOVCiwFrBzlAhsIuZ0FhQOzqxcC9gyBEFYATJU8IkjSFFmLLYJACZaA4ZwqY7UEr0FwY8AhGFAKURIXw-hWxqE1xfGXVopDqIbCOs9ZsRCiK0LpDsCo75NEhDzPcLC841FljmNwrQWgxpYMMpnPcB5eKLTAaALeVND4OP2JTGQtYyFtBXlvNc5hGDE2ERDURhDMKSPZFTTym9VC41IJxEkTEaohLKhVJJXEapRCCYWOJnQIGKiglTfKjNarazZixPJ4UNYyLLFklJ3sFp1PqXSRcRUJqPVKhLTJSxsnSCQfmK4hUKGP3ikM4x3UxIACpGlUFSdIGZok0h3ALKNLyXSfKlUzmbfuCD3xOMLi4s67UEyVHtmZZyJ8oJmwsqySMfjaZtJkR0mxWzsH3gYk0liRyqRFy3jcQ+E8oLJIWezABZlQwPKNKY6RLyzQrzBUxIxBYP5Ii4m+VFVxsKgBuDfGK55QiAM2RnAcBjHkqKPMcmEyLnxrIeM-RsFK4IMpMU8tIjYQXRBZU-KF9zwxsmInCvKXLUEdCbjaT2EpW6ku6eUUuNyapITEBJZU5wABWDcWrjIWFOFwLhlUS3VRq8O3LariAkinLysdLWR3RealVEljpH0KeMsQRhFCDKnFQLCjq7X7ANja+V9kmCOXfDQTV2rOj3yqAGk1X8-hbxdofZEJl0UBtDAmtImbvgJoKdMKu5UPVepNWapVFrVWR2tX8ItlQS3esUL67NeNwwE38SDMARQQT2HhhZUAIhxDzHznisyjY60+qwpOltlitBaS6PgdQjJiigFIC0GqNVuSN3GS7TSzVgFr3hrG3EFanWR3zRvN1RL3BVq8c-SNWqV4gPhi4nV16H1Prlds0I0sroDXcs4-dhRxnGtEgGlZxgAPL2Dd++i8aH0us6ISuKerFAGqNXostYlwOdNtberNAaXVnQbVEadhH53pxDbmjIpHb1EfdZ6xtzayN0YNn7XAi75VqBYOwKA3huDoH4AED5hlUPodqsapx4hEz6ujcB6960m3CVMaAAAZKp0AJGVPJR0zemTaH3mxwWDUQWnoqVydbQpuNaHDUScw040SJmhRaGtcVENTmBjopUzkLoyG7IkenaYzpInfJnMTB5hoNwLNnVAxFlzaQouGZDQsJYKwbxjKs0hGzGHUIiVEqlowrnbGhfjImArkyCzRZA5h-LrwINsuC7HNlFVyveb86EALTb2Xmca8lwEmKeJPIyyh6z4nqj2b8eHOlb4iux2m60bF3XuxVevZ15ta2luciOrhkN830IOwFRGWFQ2TkMdLWRrrN4g2UdgwsXl6XTuZf1bZ8buWHM4whpEiRxC6AaVAAAH3+89MTL3JOTbEmYG6ihVyJl5X9wHwPRug4m1S8OFM4e9dg7yxbD32ugGa99crG2rs7ax1En7fLsrQsFZS5bw3-OMdI5dwLTzrvFdKmFx2-d0L3YKwl-lLIad0BW3FUDH2efk6IhBvno6qeHaFZjz5xnlhphDPL2nnJ6cKqy2NsHqOxKVjV4Lo7JBZvuZV+mPm2ZcxsuUXTx7cVBEVYeIT14aRidBdJ58w33iay47fXFYnLOeuK8Mpzn36ujRW4FnUBasStdlSiI5i3Ruwwm4g9H4ose0ixKS7dqo6PJdUXt5FXzAeTZI5y4c8HolC-fal17wydfCKGNaydvHvSigEBErwRvvlm-ROfJnwWdvNcO7sp3z2IkMB99KgPinvvfHmYT5P7vTiADMs+Y7yvEYMZCCTPu7-91ex3pWudoS+y3p6Yt59EReGluFXNw8p+pybzm9Tb+GOH7H7CrTCA7+xyphJzzyVyqD2VnkUQ5jaxPwrx12Rzexr3AIvjN1gzuWNyFWP0s0D0Z2D2W1D18mRhtG2joDM3tzxxByrzyzdGIKWEGEj1N2yARzLAoLswQP11EmoLtEGH2UgIoBQM+U4I9EGDDFkDBC7DH1+Biz0QuSnycV7xsVjkEJIMGBQmrigPbxgNCFX2ny31cToHdGUL1EJjqG1F2kwKkP8i7xEk3xANEyqDkRgQXjk0oUr1YMvn-nDgcJHH4MMi8MTB4LfCLCcNyCQ00M0xwMuycN0N-ngV4KQX-lGTAWI0Z2QQUJDSJFiMCPiOHiDjOmnVSJg1ANxHLkrjUJHGyMXlyN1SqFnQqI2Tc3z2qF7gURYmQSqMy1qPyISLZxC1KgWE8UwKwNgOe0oIc08R8N8k8UX0GOSPO0uyCzSNg05wGICImBXxq3GNWQgLfHwL6KqBVGAhFDFAlC0W81L1CLCIWCSSYCugOOFHVGOO1GO2XyYN5H6JOJuMeEFEOIeM1BOOL05EWKKOuNuO+PuI1AuH+I10dFyHOIKHINcNe2r3YJBK+NVCOL+KeIYKBLsMpg+NBPRN+MhKxIezhNdXkxGzgNGJry1AZAJJ+IhNpJCAmNKjuLVBx2gLCO0LkOiNfjuJtBmOq0sNkPBxnxxN8irjdDRPqAFM5IpIn2kKsI312LajP31AUC0S1nQOsDmkZEYQW3oMSI7xq3VLBGsBWQ1i1LTyFV1JcH1PQkNJVNADZIxOJLv11FNNOI0M6C3hdM0GJj9I5KeRXhcMqFRMDMeK9PM2el6E509PBE53Kz9OeQRS2GNRiOlIhkGU93UTjHOXjNJETNeGVDBLVBTNTIrEwwzP5OzI5T-04UlP0MzNlNZydIWALOeLIMuMRL127Cmwug1OZOiJ33oPMLOyY020dF0KClfyFVHxhKSPHKZ2Y3mNbPeU42-W4zYC8C4F8D4DQHX3Z21woCYAITEERDxBF1gMuCuE9WIkvPJL+F6DxFzJDg0CiDxHDhvK0DvMg0FEoBqjSCKBHB2hqhZO1wIGCQvPo2vQAEI4NTzxBoKgYbtPlOd9pv8hYc8fEIpjTcsOCUYmZJoM8swY8sLQBSlEVCjcTpRUYHpv1MQrzjzss3DMRw5aKiL5VwL-9v0MxSKs8hZGKQiLDyorCCA0h5D2Nejt9eKgCCAYLRdFSp9xLQAxSpLY4tYWYqlrx5LhKhTRLlK0gbD1KQ1OdLkLZrRGY2h1j8LzKRgINLKJhxS9iZCiV0UosE8WCkSoh8UxI7LCtdD-LHYrKfKzImLwi5jm0osnThxdgSRXBmYTAdYIVnJ-kfM8jLtl4TLYMMyCB+ZzI0qhiOtGcsrxot5pNii4gK5Erkq3xD5Z1tJpK8y9p8rndCx+dspEiirQBMxWY2qFoQoKMjzmBXhFthZ8qFKGdS08rXghqmqZqVgP5xrZq9Lr1p0FrP4ULhqGY2EartLB5hl2rZc49OJEwaVy8tCkgXBxB+rsgdNiYfzXAbrwhCoYyeqlMoh0LWrbcOrr4KLTrEqbYmxtArqbrbdsgAAeEGp6sQUK-JN6t84SMDPYOMEgQwIKe0kdegI4EEKgGqOYUSUAAAakfLFlQhulcDkERHBuJrEnDlpr-3JolBcCprhvrlfMEnfORs8AICMCEDsD1MCPxxxpqHxrEgZvqSZspoIGpsOtGRJog0JpJsZpPOZtZpep6Njl2AOCOEW3RTZVwq6AzgyGqD2ASnOpehDTCWIh+uOosz+FDNqPBr-3lBNu1vNvIDiuZr2t1mvA6T-zmDZRSl0xI2dvqV6BIw1oDvx1wWXKwnBpzUuw1oLSmD0j+C7m+GDuJgqrLiqqukqV9vIVfS2ERravDlIEuFRlAAKxrS2GfUvWmC3g2sPlytaug3LDOmtsxHyrGu7tmrSA2qWr7pWCDT+DTuATx2+FNoFFSqyFsN8jpT1ufgNtl0Ns6GNpMGno9qyAbp4s+S7tto1t3ouvoidrlqBrYjdrNtSsAhoHiqZALpSv9vqUDsOqzoisGTDpkV6DrUjuCQ6ovv4i7vyPPsTqiuCVHrrtJpjURlnvfpzpKJ9ohXtpLs5uEhXojkrptGrteETjsAG2SFrumHruLsboSRGpWBbtfg2tnpTodvGS7sHtt2Hs-gHp7pChYcgeIYwUnqvpnug3Gg3OwS3N404B8B4H4BQGGvWhui2moHunRhpk8p7KrNIHDg2jkdAqKyao0bukTE2hBF4M1KUfSqXPWppjmq3l0fkb2i40PmNRjFAwbQg06AbWBnLK6FA0nRcYKEnXcfhUT1El6qYB8fetZn8ccZqwllCYlgibTJqxSx4Qg0SasV5A8c6FA1kHoB7X0AgyyZybSYCdA0Rp8cRvLHSYKFA3anED1HOHoBWWqbEFqcYD+AqcCaJtCc6A-LSH0DuvSkUhJsMFADadAyUk6YKG6dAF6emUUlUiGZGZqyUhBJ8cUi6DSk6FUlWYWfwuWTSGmEmemfWcUhmSmYKG2ffFEmAHGdWk-Kmb6dAEUjAHmaKZqwAFJrmDn7nFJXnTnhmXn8L7rOnPmZn37en-mLnYKdMgXbnDn+nQBIXiYwXIn8KIaPmYWvnQAoaCgkX4mUXkpxngWjnMXiY7nwWk9Uo0WemMX0psXznyX8W9muhCW4XUoSWcWPoatYLrmHmph1mCh4KChLyYxPIrHZG9H6LsExqUoYQncG00hrHQKJWQgNlRXbobGlWcQH0AIR1koZWOoghplQMFXdoINid9Y2meqxX1XJoNlsBVXNH7pxcdXE9QNm4ZVpAIM3XvYLWKzAnIASAvZRBcm9n-XA2K4fWKyqnlAmnYBIAfHGnKhY2I3Uyo2amABRUJhNtN5NhFUDAAOUUDzeuYLbzcAZeRFfIeNcTCdald1a6CdzIGmS0y5CrfP0+xVcratcVZrZCmlfrY6kbfWY9yOnla7cdYP1nE8iaummujVcVcUZIFtIlnCpnYlDDKlSYEum9o1UUDMGERuiqvf25lbYMZ-LfGMcOiXb0SdKLV1sfpYnCp2qZnvevFYQFNbYph+vrP4VbZrYTu-bpDfcGQ-Z3y1coBaV9fLF-YnchU6pzZkQQbzqQZ2PeXKo9UqBcF2HOFRBfeSEPlveOFw-fCnbJVdH0JoNII+CaglWqKQkQvPKRGMlRGfiUNoOuhqkHPEMdA8l7DIlckaCIK4K5zUOROWz4i2DmG5QE4MLY-MEFlMK45LCorKvIdYCuilPuUPj5iriTxPIPl6F4H+AwE0mtUzlY4aDU8dgqRZBzXQ9zuqqI60iAA","body":"function eval_conditional(component, env) {\t\n  return is_truthy(actual_value(conditional_predicate(component), env))\n         ? evaluate(conditional_consequent(component), env)\n         : evaluate(conditional_alternative(component), env);\n} "}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Finally, we must change the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"driver_loop"},{"body":"function\n    (from section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":") to use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":",\n      \n    so that if a delayed value is propagated back to the\n    \n\tread-evaluate-print loop,\n      \n    it will be forced before being printed.\n    We also change the prompts to indicate that\n    this is the lazy evaluator:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":521,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2AFrClTaKBT6PV2Bj0AAMDnoAvA-w5wyTtgyfioOY3uIw6f+Axb6slfe3KfEP9fYAJcV0U2BfaQ0WAGbaSfLf1f8M93tgvAQAA","body":"const input_prompt = \"L-evaluate input: \";\nconst output_prompt = \"L-evaluate value: \";\n\nfunction driver_loop(env) {\n  const input = user_read(input_prompt);\n  if (is_null(input)) {\n      display(\"evaluator terminated\");\n  } else {\n      const program = parse(input);\n      const locals = scan_out_declarations(program);\n      const unassigneds = list_of_unassigned(locals);\n      const program_env = extend_environment(locals, unassigneds, env);\n      const output = actual_value(program, program_env);\n      user_print(output_prompt, output);\n      return driver_loop(program_env);\n  }\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    With these changes made, we can start the evaluator and test it.  The\n    successful evaluation of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"try_me"},{"body":"\n    expression\n    discussed in section ","tag":"#text"},{"tag":"REF","body":"4.2.1","href":"/sicpjs/4.2.1"},{"body":" indicates\n    that the interpreter is performing lazy evaluation:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2AFrClTaKBT6PV2Bj0AAMDnoAvA-w5wyTtgyfioOY3uIw6f+Axb6slfe3KfEP9fYAJcV0U2BfaQ0WAGbaSfLf1f8M93tgvAQAA","body":"const the_global_environment = setup_environment();\ndriver_loop(the_global_environment); "},{"tag":"SNIPPET","latex":false,"id":8,"eval":false,"body":"function try_me(a, b) {\n    return a === 0 ? 1 : b;\t\n}","output":"L-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"try_me(0, head(null));","output":"L-evaluate value:\n1"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Representing thunks","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    Our evaluator must arrange to create thunks when\n    functions\n    are applied to arguments and to force these thunks later.  A thunk must\n    package an expression together with the environment, so that the argument\n    can be produced later. To force the thunk, we simply extract the expression\n    and environment from the thunk and evaluate the expression in the\n    environment. We use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    rather than\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    so that in case the value of the expression is itself a thunk, we will force\n    that, and so on, until we reach something that is not a thunk:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":false,"body":"function force_it(obj) {\t\n    return is_thunk(obj)\n           ? actual_value(thunk_exp(obj), thunk_env(obj))\n           : obj;\n}"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    One easy way to package an expression with an environment is to make a list\n    containing the expression and the environment. Thus, we create a thunk as\n    follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":492,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQco2wk01AsHYFAbw3B0D8ACEiwyxcE1Jtqqkqp4hExThcKOvGWz1qnuEjk0AAAyKToBj03hSslYm-H40uHpR2hYNRBa527MJ4xqnuMptQiJUSWmhRaDzcVDtZmBhEskzkLoMVY1ydrSes9OTHnsd8nixMNmGg3D01s1Jpn+jmBhe+synnY4LCWCsBTOLRODq48m3jBjw6xaMJZlR3n4yJgy4CgsgXnPBYy+Fi1gH1PPNkt8wY318v2ac3FeTv6POVeRQsOVLEGvkZNklxNKXU0mc660LLsdhvoXK-FxrdlmunqwrN9z7SjqPLG3y1oAryVOp1bpv5zmFs-rm7EqLGn8LDOCcK9pu24qcf6zxwbVTRI4whuVO1GlQAAB93vPRu4Z1Lurw5mBuooVciZXvZE+99vrv37tpbEhTMHbXDJ2qNVNnr1WskVXy-to7S9Y7I4dptiMF3dVFaa65qIv6WtLeO1VuM+KnvoTtVEDLaQCcsi23QUndlgsM5e2doi4WWcReyo6onh1Ee+U08sNMIZCfOtR3h5zP2BvGYe5WWX7Oxejes9L9MfNsy5nK-oknV27IAvK5j14aRsceZWzroMIYqYK82Xt8nlPDu24l6VHz1Rdca7DGLqI+uBZ1AWmM03oRgvq9F868Lwfiih7SGMr3cb4f86ojtqKjm0f0UE9D1XsPRJp50edkg2vafF8Ihk+rl2EvFdTQSggIleB24r-67RVecTx8FsbzP03I8N6KE3qpGBW-IsryM58TvuuK7iq8ofIkADMY-DKV6QjQR2v9GeYWdyJ5zPvecd8n5zMWE-S8vDiyKrmPvo9y6eucs-REMxZhD0LbCtzCDt+R9P6nKf6JouIS61r1+H0zzxV1ZULwAKkXL2RTJU13lxnz3zJ03SpxJxp3ayqEng9GyWAJz2VzuwL3+zEiwPrhj2sDewhzLHwKMwgKIMezoGzl7iiTfBgMMhIKYMbgUAnlwJdzn0H09mbxX18nYNdFUA3loL71n2534OH1h1H1xw7REOnkFjnnMQmCDjOnnwEKqWXz-wWAiRHBkR3lHVAOSwIPfGvnDgMMyyENKmsOYNaCLGvgrQKBAK2Wx2cNsJjiYQcP-lkV+UEWrXJ1gQUNpwkV8OkVgQ0Pw0OxCPbVpwWBPjiDPkHDESMJvmiKVyqAA3SIRSswSK-iISkVyJMMS0WHcQp1iP8LbXThO0pjXA3EQKQN6wM3AJMyaVYN8iaRaRrF3yCJQI9yW1CORR9yaRkSkS5wH2M1Eg6NhUAImD0KqBVGAhFDFAlCSXs0imzykLjSmSYCumWOFHVDWO1GJx20oN5AWC1AZAOMFBWOOM1HWIz05GGI4yqD2NuNVFWMeNOJdVry2M6H71zzMJoJMw+MeDuKOI1AuCePIK8PomuP2IhK+IeJhN+PiwBNcLwKhzaIe0RM+PuOhOuJCE6NKkOLVBRyaM0JkMENeN8k4WRPqBtD6KCxpJH3hPXjdEZIhk+SpNZP8gXx0PQMMh931C4PBC1ngOsDmkZBsXWzv1UEmLKiiFEjFLBHIPdT+ElID2dRlJcDlPQgVIYGFN8nJO+LRKf11DVI2J4IKDQTNM0GJgdMpPaQQX03BOdJOJtJJ0sTp0TGtPBB93ywdNphpTpFSQZMOOZNt3iT9L1AunFNJCDNeGVEhLVFDLDK2AjJ8KjN5KpQ-xcU5IYO5OjN-z9QKPjJBETLOM5EyOuxxPMKGwTPVLoFJJjnbyNOd36LcxwLQLpNKiCjIPZEQO7MqLPVQN0xqNwBA39TozYC8C4F8D4DQEX2y1KmLlLnLiiDxCVKuL2C0FrWIh3MrTpF6DxFjJDg0G3PDkuCuEPOMAJAAmDQvQAiMB2hqjbPogIF6URGPIczOgAEJc9NyxBfyr1ajacfd9pu9E9GlWkIogSecUYmZJo48X8E8hYk94KPV8iMDoSEhUYHoqtMRdyGzQSCBw5pRCLUL4TeZ0Ke8SLchmipjyoF8KLQAW8gYILx928ncCAK1qSBSBD2L5C-Y1z2yqtmYTAdYWVGL-z+TWLhK0hdCxKvNvdcsCVY07M6BGZDE68+Dpj7YzJwtrRdL4TaEtKGEAsI9gTbtQTlUxIjLspPynKRhHZdKohrL9KZs3dDsAsTSylyBdgSRXApKZKWJsVmL3BDt4FVLY4GSCB+ZzJ2V5LXdN1Yrxo0EVMkiUjDldZWgGkANtI1K2oNLEqUyjdWc-oBKtlMxWYCsfkqrspRo4qO1yqVgjVhYkqaq0rPl2qjBwLxLmBXhsEurXgeq4pf1+rBqSqHz9kwqjkYEasFpwgw9OJEx9Uc8DzXBxAGr1lFNiZtqXBdrVqbZthQA6rhIoKkq9qVrekuRzh1qpKzqCg5gjrdqjdsgAAebQJIY6sQTy+630y84SUSDwTwdqEgQwIKA0t9egI4KsmqOYUSUAAAahPMLJLglBcDkERE+rRrEnDgJo-1QhulcFxsBvWRev+BBpVPBsICMCEDsFlLfEYHhoTKRrEmJvOVJuxopvxvRvCxRvRpJqxvJoIERFOoCsjz2EOGOAtwYXKwQq6AzgyGqD2ASk2peg7QGVuqaoCPYTKJyM+o-3lDVt2AFGciCpoBCqZDytkoeQ-zmHKwOpc03RNvOV6Hk1OqdtAF1t-U+rSF-Slt4VfkbA-m+FduytPiuntrfGExtUEivKVrElIEuFRn-VeH3S2BI1wzHS6WGpWAaQSpuvFXLDOl1v6s6sxG6rSCrpChrvGpXSURhEUR2O5HVstvFW4sMjlSNSJRTvCGVs6FVpME7s1pSsbFjl1squFwNvLqNoqI9rCTNrHotonsAhtuxoWvyo5kdvOWdpq1dvk2Xq8V6EPW9t6SaupotD9vUTHKwkDuirPRDoUQxuoURitpMCjprVxBjp3pZQTq2FppTojnTptEzqLpUjsDW2SGzumFzrIy2DQX6uLp8P6q-ubvvi2UrqSurumrrrwYbumqwbDpbpz2+HHsweKRnKqznIY04B8B4H4BQCGvWhui2moHunRhphsuoIjNIHDg2k4ffKy1muEbukTE2hBGiSgVJAxiYtHKmpphmrQQka4b2lnIaVSRjGC2PXC06GPWBgzIrEGzBrmwMYKG-WMdFWC0ussYuvExsd0bMYlgcYlmcazLMZi3cXCx8cKV5BMa6GC1kHoDvX0HC1CfCcCdsbMZBssZBvLCCc6GC3anED1HOHoBhTSbEAycYD+GSYKGC1Rocc6GvNAH0GyDSlAEUnRsMFAEKeVNEiUlKYKHKcqeBUUlUnqcaeCyUg+MscUi6GqYKFUiGd6bMehTSGmHaaqfSkUhBQqYKAmemOAFadWjxDSA6eqcUjAB6diemIAFJ1nZnOnQBDmlmGmDn3xRIlNkpSnTmdnXbKnrmVSAKlMHnNmKm5manQB3niYXmXHpivqTmvntn5nQAfqChAWvHgX7npmuhHmIWvriZvnXnRJUpQWtmfnFJ0poWVmbnUp4WZmwWcXQAiX8X0WAL1nfnhm8W-nOgdyYxPI1GOHJGiKV5OqUoYQAVj00h1H3yOWQgEVWXboNGhWcRsMny+keWOoghgU7G2WNHwtsd9ZGmLqlXBXaNPJsBRWRH7ped5lUlgtvVvZwtTWap1XMyimzHIASAvZRAInpm7WHWz4rXrXUnlBcnYBIBLGcnKgfX3XMzPX0mABRBx-10NoNsM4LAAOUUFjfWfjdjZvruRZYLoFYNa6Wey5eSllYSjIGBXkzIC5EzcTENfTYYFxjLc3zQm4T+m5a6ABULeqZtyOn5c1azareewRVmummujFa1f9TDmZpcAliVP7YlEqA9iYEum3ojUUDMDURumSJP25hrekYPLfCSRFlHfHb-zXSOAAZYiVIZkcWPevAcWZJrYpkqoLK8RrcP0DvvbpCvc+RvfbylcoBuWteBkfezfQhCmjbCWjuSNjpZkWo2GKSyt-rHfTVRDjoKv6VimOEQ45h1bxwDhln6nfEGmqSQ14OkOmL3WGnkVwreNLSw17SYsBOxNaMbOw3Dj3XhMXQJApzLVbUUfcN8vHI44Nlatp0XQyHY4kgmp8oGPHMOxbWWy4twDQVYCukJBoBcH5gaT5nXhVN4CBgcxLhGCBkXy4rzR5QU+umU-5iDt-pyvA+ksg7aE0iAA","body":"function delay_it(exp, env) {\t\n    return list(\"thunk\", exp, env);\n}\nfunction is_thunk(obj) {    \n    return is_tagged_list(obj, \"thunk\");\n}\nfunction thunk_exp(thunk) { return head(tail(thunk)); }\n\nfunction thunk_env(thunk) { return head(tail(tail(thunk))); } "}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    Actually, what we want for our interpreter is not quite this, but\n    rather thunks that have been memoized.\n    \n    When a thunk is forced, we will turn it into an evaluated thunk by replacing\n    the stored expression with its value and changing the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"thunk"},{"body":" tag so that it can be recognized as\n    already evaluated.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.2.2#footnote-4"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":482,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKaEaWV0BruWqc1ToZ1UmiXEBJGFxgQ3iuKv6+i0bI7KnOAAK2Ol0GK55yhVCnC4FwNVqgVHfDQDN4cU37BTl5WOVbQxRCrVms6YgjCKE+VOKgWEm1aT9io3y9bviNrEBJZtWzW3tsbYoLtU6Z09t7eNfAk01AsHYFAbw3B0D8ACEiwyxdFCFuLakqp4hEwFqAaq3N9FMysxvKAAAZPe0AE7Pk5JSslYmp6kIHvpUmhYNRBa527Be8NWz92Htqsegx4cANCi0DWxNzzQiwYGESt9ORs2Xrii+2d2T2mPN3b5PFiYUMNBuCBzZV7I2kfg2kcjv6kP0SWCsO9OKwP5oPUWyDpaRKiWY0YBD-bSrEZeCxi1WgKN4y2ZG-jsbxMEdjuJiq-HWM5uw22jt068O6oNn6xjCw5UsXQ2pk2HGIMltQrxwzrRBOx2s+hcTqmsN2Rw52rCrmtOxN04h5F9nuEOvJU6nVwG-lXo83OzzOTvNCbzdowiVEQtsaveBrjFnWXQbEjjCG5U7UaVAAAH3y89FLR6eNVNEmYG6ihVyJly9kQrxWzOpag7q8OFM6sMeRXao1TnQNXqU99FT4XtPAei7HbrDtAsRmFe00L6nJ1udw15zrhkRNZfQnaqI-G6MBZZEFugkmI08dEutnLwzgl0Fjdt0Ak29vTcOit3y-7lhphDFN51vXKNxRK9xyz5XKxvbu862zSaAcZizALXM4n9E6bm3ZAFA3njXeG8t2toOXtVlaZ9qTYWNNLcW1FhTSaRNg-e6SPm2Y6gLTGXD5Dx3SdA+sLGinkOhZpDGY90qCx2vnaSehyKmG+vfaa6Vv7GXRI850RdkgIPGOS-iziFTxnnN0-8kUAgIleCPNjvLkZz4WfFCp9jo7avPYiQwNrpNuvpctJrMb6TpaCUa6qQAZkt3L-1cWkI0Edr-DbmF7dXrW107LcW9eczFtboionzEli5iTjHgOwz3Yj2EqPGSDeCxh8B91ZZ084ipqj9Of6qhouIUZ2bgjjHfvMy17s4cy9SNl8isljOZuw6r+OvHBP8Oc9i5PD0I3OS0+TZx0X6XWuZboNnXujr7t5Ya2WH7aXeMD-rlEt8zfDJr9n43BQE9K+-BN+VdXmv3fIp366VQG8J+JaPw703zuMsW6XrHS-09BZz1jxsIOx+nciTdz73ogiRHBkR3go2rwLWax42vnDhAIE3P1UQ3gnHRWiWkWvizQKHv1xwW08wwMQN8k4Q31IXIQgK70nVgVfyTQkWIJiVgV-y2UW0oLR302PlPnPmQNuFkV+U72SyqAKSwmYJ8z3S-iISkTAJvgYL4MWHcSW1gSJ1YMpjXA3GVyF1Mxr2gLF0n1EiaS318iaVtzaQ7xM1CBRyiyoMYxEyaRkSkUOwf3fB0OULk3LwmCAP5EFGAhFDFAlD50rwF06BMPoimSYCuhVE8PVG8O1HbxC0X15AWC1AZFCI8OFAiM1B8IS05AsORQWGCKSNVC8LSKiJdT8MFy+3UKgPH141yMeGSLVA1AuHSKZwIK5yqASJCJqPyNSIaKKNY38KwJV1H1rzK3FzaLyPCPqISJCD0NKjCJSJ61ULKNVxPzNyqS1yyMMiINmJtEDzileVPyqRfxYORXXjdA6PqG2IWJx12Md32Iy0AL02RRE31H33BC1jbxIDmkZBsVaDn2dR4MCMjWeLBCZ1zxek9zJzoE+JcG+PQghIYAUORVmLqMiOj11CBN8OMM6QYFxiRI0AaVxPVEcxyQQWr2qIJImMaOiJlDLF6CeIuheNJBExUwJNphpTpFSU2OSIuPwxtibDjHxXRPBCZNeGVFqI0FZLZK2A5KYTOIhlfSpVuS8ROOn1lO5J02i0IxaL1HpOBKpMdCkOFw0MqPK0FKaPWMIPBPeM+xbW70i17yOMMiCl+L0WtPIM0wixnUJ2KSXX9RXTYC8C4F8D4DQBdxi2TVLnLiiDxDsOkMuCuDbWImjOtXAjxHiQElDjxHDjjK0ATLjUFEoBqjSCKBHB2hqmmNiwIF6URCTIwzOgAEJwyy4xBqyF0wyRN9pM8qd2dWkIoATjtpRUYHokNmcIdDc2dGkeyPVhCnsqgBymZ0YYzDSKjft3wCBw45y0Z-VyzCBPdOyhZMQx0qMbizc1zQA1i+1NSY5PdC8CBDzrjH9MQ0gX8LyddwSWYjlrxbzcgri7I9iTy0hACXzid4xEx7YzIu5GZDEkt7yHCwLspY1rRILmjYs4KMRyMR9l9UllUxJUKEDzTSpcLHZIKoh0LoKXNbSZ1yMETDJhxdgSRXBmYTAdYWVnJ2VazGDPN4EgK5cZSCB+ZzI2KfzTC8cuLxo0Ev0T44gz5GLmK3wGkBDtJLz+S9p+LAV4UdtsoeChLQAb1hJocNKRhRpuLkU+LXgjVhZ+K7zyLJ1TKVhWylLbLEwQpMRLLvyzpFtHL7KM48R9kZKPz-5vlCwNLqdOJEx9UBiczXBxA1KflsgP1iZIqXBorwhCpLEdLp1hJ2zVL9KbtekuRzhQrGLeSCg5hErorodsgAAebQJIJKsQEivKtKkODQKIKNPYOMEgQwIKGE3eUAegI4EEKgGqOYUSUAAAamTKVJLglBcDkERAqvGrEnDkWsVNQhulcDmoavWWKv+GauEjas8AICMCEDsC+LfEYH6vpOGrEhWvOTWpms2oWomtjVGomtWumo2oIERBSo1Njl2AOCOCNSJXE17K6AzgyGqD2ASnCrBMYwGRiqCtyvWRQXvnYxkMKQRtSvOXlAhv+uhvIDopmr8t1mvAeUVLmHE3fWJhwwqsVN6Bwx+vJr6vUTkMCooXcE8x+o2SmEUS2A-m+CpvcFbVxHYOJpZUkxtUEhapBrElIEuFRlAFk25qUSQXhhqT+DQUcoaSIMctYqyF4SNn6xZscvMpcteC5BNucs8uVr4RhF5sWO5EhoFD1uot8jlSBoYRlvCFBs6HBpMCdvxqyBRp5iTXhpyp+uDqmGrwEMxp2r+Bxv9rxtYsAhoHoqZEORJo5jJvOQpsCsFpprZrjudHXnKgZt6Q0qLuXGZohlZqyXZsWy5oNsQUbH5oyEFoktFozvFsjuDilr0sCvDjls0RtEVteETjsD5RsxttflVp7omS6WYDHuJh1tUvFXLDOnhpNuhzNrsrSEtr+h3qMF0z+Htr7QGO+ADpdu9LAGXWYH9PXUDJ4H4BQDDPWhui2moHunRhpgwpFxXLDjEg2g-tLMEyUqAbukTE2hBDQKSQxjcrdKW31iBjEoXvAc-r2l9IaVSRjEjRfVjU6BfWBglIrGOzc3wYKDcyIdFUjV0vIfStZioZwfp1LToYlkYalOOwWAENjS4fcV5GIa6EjVkHoBBBlljWEdEcMDpAEc6EjT2vIb2vLBkYKEjXanED1HOHoBhTUbEA0cYD+GUbKlarGroc6CjLSH0DivSkUgmqkcMcjSUlMYKHMdAEseBUUlUjseoeOyUlyPIcUi6DSk6FUgCfseO2hTSGmBcbcaCcUhBVcYKDCcs1EmACcdWkzNcasdAEUjAC8aYeSYAFI0nomsnFICmEnQAkmHD4rTGSn3HBbLHvHkm6yP1amMmYnrHQAWniZGn8mHDKrin2nSnQBqqChemOHknKrkonG6nYmRniZMmmmHDUpBmLHhn0oxmqnWrUppnImuhZnOmdnNmlnWq6y0nsmpggmCgGyChoyYxPI0E0HSyhyV5zKUoYQAUX00gnmv7fSHnUH36IGXmMly100AJerkoPmOoghgUaHAX0HY0Ud9ZDGdL4Xnnl1PJsBHm0X7pTt5lUlI1vVvZY0iWaoUXJSVHjtIASAvZRB9B8HqXaWz5yWKXVHlBdHYBIByGdHKhOWWXJS2X1GABROhnloV-ltkyNAAOUUClbSZlalcrrCX+exNRdunQd9zQh-jZvea6ABTIGBRwzIC5B+cTDxZVdQjVeAdxZD3QhCl1c6H1cNYouySOm+ZxbNdtZvkUrswuiulNeBdJFeiCglkXLsmmn6mfA9iYEuiJvTUUDMDURuiktT2BgDagZzLfFgZpihNDaAJLsBq7pYjDdXh8scTFpYgcW2IDYpn0sVLCQDdO3MolbCSrc+Rrc91BfBZuQpbTY9c1dDxChba8Q7qkquiLdcMRXEuFpcF2AKsGAneSAaQLeOEXffExdjgWHwVqirTTUzV-qNP-tBfDm3aQhHUjm3PrQYVPabW-MCJRxvfPf2DGytwckgbLQzUkxoXzSfb3bYQ1oXpdgaUrlRAYUHQJD-bSEHQyD-enr6uKEqBw2PbEkfZjTg5LsQ5dcg6k36utiBmVjACKFEZHDzNABEHEHmF6puEbAw8W0W1Ba5AEN7U6CXQ0CLVxlIBaBqhqm5GAS2Rdk0jDRnoDmQW-dxBJRzB3d-YY4lrUNCCvfAoY4QX4TVr46vVBeU6nYXtYH9ZYBcH5gaT5nXlat4CBgwxLhGCBhd2QZrR5R0+uhoH0+WCg+FskukrXa0iAA","body":"function is_evaluated_thunk(obj) {\n    return is_tagged_list(obj, \"evaluated_thunk\");\n}\nfunction thunk_value(evaluated_thunk) { \n    return head(tail(evaluated_thunk));\n}\nfunction force_it(obj) {\n    if (is_thunk(obj)) {\n        const result = actual_value(thunk_exp(obj), thunk_env(obj));\n        set_head(obj, \"evaluated_thunk\");\n        set_head(tail(obj), result);  // replace exp with its value\n        set_tail(tail(obj), null);    // forget unneeded env\n        return result;\t\n    } else if (is_evaluated_thunk(obj)) {\n        return thunk_value(obj);\n    } else {\n        return obj;\n    }\n} "},{"body":"\n    Notice that the same\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"delay_it"},{"body":"function\n    works both with and\n    without memoization.","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.25","id":"#ex-4.25","child":[{"body":"\n  Suppose we type in the following\n  \n      declarations\n    \n  to the lazy evaluator:\n  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq4C+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2DkW4yOCkBEygAAAMQM42ny7FSvufDSOfMnstvAQMZ0eIyTtgKfioOY3uIwcwtgxb6sjfe3qfEPGfoMZZVtxMVAAPnyvA+fbayfPfzf8M93b0+AnfIFoATfEQLffftglfFA2kU-d3Zk-fYAjNRIzQ68qUS-K-rkafx3tgQg2-YA5-kQrfRg+-TNR-nhp-3f+36-A-uft-y-0-q-s-PfrYEP7hhj+RgVKEAA","body":"let count = 0;\nfunction id(x) {\n    count = count + 1;\n    return x;\n} "},{"body":"\n  Give the missing values in the following sequence of interactions, and explain\n  your answers.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/4.2.2#footnote-5"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2DkW4yOCkBEygAAAMQM42ny7FSvOfDS2fMnstvAQMZ0eIyTtgyfioOY3uIwcwtgxb6sDfe3KfEP6foMZZVtxMVAAPnyvAefbaSf3fTf8M93b0+AHfIFoAjfEQzfvftgFfFA2kk-d3ZkffYAjNRIzQ68qUi-y-rkqfx3tgQgW-YAZ-kQLfRge-TNh-nhJ-Xf+3a--fOfN-S-U-K-M-u-WwAf3DBH8jAqUIAA","body":"const w = id(id(10)); "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \ncount;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \nw;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \ncount;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "}]},{"tag":"EXERCISE","title":"Exercise 4.26","id":"#ex-4.26","child":[{"body":"\n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    uses\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    rather than\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    to evaluate the\n    function expression\n    before passing it to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":", in order to force the value of the\n    function expression.\n    Give an example that demonstrates the need for this forcing.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.27","id":"#ex-4.27","child":[{"body":"\n    Exhibit a program that you would expect to run much more slowly without\n    memoization than with memoization.  Also, consider the following\n    interaction, where the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"id"},{"body":"function\n    is defined as in exercise ","tag":"#text"},{"tag":"REF","body":"4.25","href":"/sicpjs/4.2.2#ex-4.25"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count"},{"body":" starts at 0:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2DkW4yOCkBEygAAAMQM42ny7FSvOfDS2fMnstvAQMZ0eIyTtgyfioOY3uIwcwtgxb6sDfe3KfEP6f1jyK9A7YDI0QJftfoAsLdfLlSf3fTf8M93b0+AHfIFoAjfEQzfvftgg-lgRQa0nyvAefba0-d3ZkffYAjNRIzQ68qUy-q-rkqfx3tgFfFA2kR-Kf93tg5-4Yl-RgqUQAA","body":"function square(x) {\n    return x * x;\n} "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n      \nsquare(id(10));\n      \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n      "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n      \ncount;\n          \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n      "},{"body":"\n    Give the responses both when the evaluator memoizes and when it does not.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.28","id":"#ex-4.28","child":[{"body":"\n\tCy D. Fect, a reformed C programmer, is worried that some side effects\n\tmay never take place, because the lazy evaluator doesn't force the\n\tstatements in a sequence.\n\tSince the value of a statement in a sequence\n\tmay not be used (the statement may be there only for\n\tits effect, such as assigning to a variable or printing), there may be\n\tno subsequent use of this value (e.g., as an argument to a primitive\n\tfunction) that will cause it to be forced.\n\tCy thus thinks that when\n\tevaluating sequences, we must force all statements in the sequence.\n\tHe proposes to modify\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_sequence"},{"body":"\n\tfrom section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" to use\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n\trather than\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":false,"body":"function eval_sequence(stmts, env) {\n    if (is_empty_sequence(stmts)) {\n        return undefined;\n    } else if (is_last_statement(stmts)) {\n        return actual_value(first_statement(stmts), env);\n    } else {\n        const first_stmt_value = \n            actual_value(first_statement(stmts), env);\n        if (is_return_value(first_stmt_value)) {\n            return first_stmt_value;\n        } else {\n            return eval_sequence(rest_statements(stmts), env);\n        }\n    }\n}"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tBen Bitdiddle thinks Cy is wrong. He shows Cy the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"function\n\tdescribed in exercise ","tag":"#text"},{"tag":"REF","body":"2.23","href":"/sicpjs/2.2.1#ex-2.23"},{"body":",\twhich gives an\n\timportant example of a sequence with side effects:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Iq+8vcWMJYSfnBScsxrUbBbX4C3c7pfdlwzC2DvUii1pgxhyvonwtGHyfwbGFJrSviAIzVeo2iew+o+yILY+kbmXJebq1CsCAJAyga4j2B02vS-ot9t+IIwzCZJ97cp-3e2DFvqxSlvTD-7cQ-p8gZZ9d8oXAow+CVpCpIACsAA7GkGARgLwGkAAByH9tr4Db+2B7+8C2DH+2DJ+Kg5je4jDz9gAT9AA","body":"function for_each(fun, items) {\n    if (is_null(items)){\n        return \"done\";\n    } else {\n        fun(head(items));\n        for_each(fun, tail(items));\n    }\n} "},{"body":"\n\tHe claims that the evaluator in the text (with the original\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":")\n\t  \n\thandles this correctly:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"for_each(display, list(57, 321, 88));","output":"57\n321\n88\nL-evaluate value:\n\"done\""},{"body":"\n\tExplain why Ben is right about the behavior of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tCy agrees that Ben is right about the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n\texample, but says that that's not the kind of program he\n\twas thinking about when he proposed his change to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":".\n\t  \n\tHe\n\tdeclares\n\tthe following two\n\tfunctions\n\tin the lazy evaluator:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":541,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss2gM90w1P5Tx1cFZlFvNHmaeWBT4GQYiKK4NUdDpxiFkY8wEKtVprKQtX7UER1LVMKEUKARJEFouPJWpUHvcDk2VNWM2kNSZPlviOY2riGRUCw3HJFEdPAwUFOZvUKw5kwRYY6W3Pc595Xfb1ijVbV81IvVQ2gKD4OQ9IXO8hT3ys3QLEY0d2mnbFdkLK1aLZVE+OE1+0y9GbNwask15Wz2wNzKjRjyC00iG6AMNGHDWNdHUQkHWk4kkJJ0mhJN7j6IKymqdNGm+3p42x+xjvunQnrUckTUdGdCwUEwRDiIiyImebGJuttOeDGGshgl2nIeb2ZGuY0Np10sgwoWOPGgfWi69nMLlKrXdocYTdTart2FmmN3mwaEmf0APnZRKhrAUAti5BwjSNVEY8QUFd69Dpv2+75jJ1bGdHtezVvsFP7gcrWtAaceVqFXhz1+FWOo2M648oLyCFj-Kcr5rwAK5IuF+ftYbrwPl0HGhBWb+WvtXeGxN3qgOiOAzBUCT4wIoDvQqn4EFdA-qbY2z4biYgwZAne2Db7vTOoQ5h5UbhUM6G-ZBd9eQgIHBfcc0QiSQL-rvLeZCb6UMbHpLoadl6GXoEoZ8NAy4YUApRawc4h5tAPkXKoojhwt0dM9OEDgiCsAJkqeESRpCizFlsEgBMtDOJcVMdqCU1EQ0eFoiiwE9GeK8VsUxnYXwkNnDeI6z1mxBKIqxcCEsoiJJCHme4WF5xxLLHMNxWgtBLwmo9Uqmc9wHl4otQRoA0FUxSqACp+xKYyFrAYzyqDVC4zXOYRgxM-EaMCZhXR7IqYdM6Gg0gnESRMRqn0sqFUplcRqlEHphZxmFDoSTaIVN8qM1qtrNmLE1nhQ1mEssSyZnewWmc85dJFxFRKT5UqEtFlLGWdILe+YriFSMVsnxXysndTEgAKkuVQWZ0gQWiTSHcAso0vJPJXveSoZtf7QI5lU-eNSzrtQTKiuh2DnLDCVGbCyrJIztNCXc4GDzikZwHNMiF7N3xYqpAfNBNwGn4KRFxN82DQwUqNDk6lNL4EwiZUxTJBYiWSpZdKq4C8bjyJalsnhiKGWonSZSvOR5sUSq4gqrKGJGzargnCxVIq3p-B5Wa+hZlBXhjZMRK1i5RWL0Llsx+Epn4atKeUY+JKcy1XEBJZU5wABWQDVXngDUhRQLgXA1WqBUd8NBI3h3wSGsQEkU5eVjqGyORKs1IRzZHY61rOhnTEEYRQnypxUCwiWwt+wDb5v9fZJgjk02RujZ0GhVQW3hqjX26YaCXYNMrqiBhLbQzDq5LO7486NlTHXuVGtdbh2ZqDcmltea-hrsqBu+tihG3zrSC7LSIMwBFBBPYeGFlQAiHEPMXeoAbiNkPQ2rC37z2gAKVoK9nR8DqEZMUUApAWg1RqtyYBWyXaaWanwpB8MB24h3dmsN6aR0oKrVs2dDDsMrv4fDGpMa4rYYQcopFhlpZXQGu5apSHNmxrKlEUSe7hryOKh24uZaNxEdyF0GKrHi4JqTbVVJ2Hw57seQW-jc6W0VurbWk9Z6lNXvTh2xdGQohKaEypzdv7jP8aOpp3AIH-VqBYOwKA3huDoH4AEGjvkxOJuTakqp4hExThcKOvGWz1qnuEjk0AAAyMLoBj03hSslYm3n40uHpbxgM-Rc7dn88YxLEmU2oREqJGogtzB5p4880IhWhTGvMRMITnQRNxWi7+nJjyXOlTxYmCrAwog3Ey1s1JBW0taBhe+syLXY4LCWCsGLOLAuDvEx51N+XJtGBKyo3y7WXhTYtYBv5rH+vLeG9tsbHbtsVWW9N+rdlGunuye047ZX6JypYqFmbom5vuck4tqpoknutFW7HX76FtsXfI1d1TembtRGu2e5rbbSvIsB9wh15KnU6oy7thr4PjOQ9h8lh7Cw7Ug7w297LC28vfZxhDcqdqNKgAAD50+em5nLnmDHhzMDdRQq5Ew0+yAzpn72WdfbZ2JCmvO8fIrtUaonLG4qne+ud6Ht3dVmaXrHKXDsUcRmFe0jHYOjOQ6a3d+7yKNuU-QoT5baRNcslR3QXre3FuiXN9T4ZwS6DDatyN7KjrteHQl4ZBYlYQxa+dTLgLJPfNC-JyLgryw0wh9t37-7Hbg8ZizALXM239Eq7121Dq8vnhe6V7EuTqf49VlaeHwzamf04+NwH9b8YOsV8T2GP3UQ+bZjqAtMZee2Nx6DG3oVJBhtd8z0LNIYzG+lQWGLt3SSXuRWE6DuNUeyestj-PnR7vR9l4e9vwiGTzsvcu+V1NBKCAiV4Pv5Fh+RnPnH8UHv1e+sX6KFfqpGBb+GXv7vlpNYr+ju-kH+IkAAzD-r5IfkhDQI7L-BbphEAXFGbl0lTtokfk9GLH-kRJttVhSFzBtmnqHpgWEtgRkk-oLDnhlu6mWGQTiFTKXjPnGmisQs9rroIlluvp9jHrquHCwVIing9mSknmHqfsTpjgbjDndkwfRJPB6Mrujq9nFMzhvvlnIfXL7s6rTvzmWCodwZvrwWJOob3FEm+IIcisYaiI3AoBPOwb8GdK8qAVUjfmrh2pYX3KoBvAYYofYW-iAZ7CJN-q4Q9u4XqDPGUFYPPGIbLnZI4QEVUhATIQsBEiODIjvKOpwfNvoWkUeKJCkStpAaVPkaYa0EWNfBWgUL4axiXuUYUTHEwiUf-LIr8hwVstFrAsEcihIo0dIrAkHGdL+h0e2vjsfKfOfBvKkX0a0STgBjkQivDoHl-EQlInMRkbNosO4hDmerAibosZTGuBuNETEWvlkblt4R8OHE0uYYZE0gAW0rnkofrrXrEp0YZBtk0jIlIg7nFP1lcbCqwRMEkVUCqMBCKGKBKIvuwcvnVqvvRFMkwFdCCcKOqOCdqDrrnjobyAsFqAyIiYKKCSiZqBCVRBlq8a5lUPCXiaqGCUSWiS6lCSvuISbILqod9pSY8PiciRqBcMSdYNceSZTBCQiRydSYSTyXSdNtCZUbCXoWcfljicKUiWqNyTiSEPyaVEqSKMDkcRHj8e-vESLi4cMXfg0UiTaEgbEfqZ-iLkEcaaogBHQLVGaZ8jqQ4VaeAbsU3vivqDYeCFrCIdYHNIyDYq0JoXot8ZaXlj9hdL6XyTQS9P6mGXQEGS4CGehMQaoJ6RqZycqaiTgbqD6WCGjpyByl0qAJqZoMTBWdLjkgglluydWXmSSTKGWL0BtoWUkhtudhWbTDSnSKkpwiKfUOabDvEnGN6TGUWUaF2a8MqDmRoL2X2VsAOaaZySOVSrcl4uvG6EORDC6Q3n6iMXqJOZCQ8VUcoSydkd9h2WqXUYQImRmfSWeUyaECXs1mSaVEFEmQwDLjXlsXXlISrnDhZmAJNNZmwF4FwL4HwGgGAWtrPoOqXOXFEHiBGXGpcFcLWsRKhZWnSL0HiGOSHBoChZcXsFoFhcYASABMGhegBEYDtDVOqXGgQL0oiDhTkLqXZAAIT0QlxlxiBsXmatb574r7QUE95T6tIRRn4D7SiowPRlZj4Z7P6T6NJSUeoLEClyVMzoxoW8WnEDnhzaVoz+pMX3llbp78wqXCzKZ+HlSgEEBpAuF+zwUxyJkMEEC2XAH2UBGOWgBBEuXCXmUrzMwmA6wsqYheV6n+FX5+WJGBWxwbb2xmRdyMyGKPHn5RnJXZTDbWhpV3m0KxpEo9b96ympLKpiTZUjBmVVWJh5XXglUZVRZY6Q49ZZmrzkC7AkiuChXhUsTYqcWhC-rwIJUdqDkEBWXOTsocV-kjXjRoIJYnxxBny9VHKtANIAbaRBUbYTWznZ7W5-RRV2SZisyArwoHXZSjSjUH5WVGrCxWVHWvng67UrBCWxwvWJghSYgPUGb4aQ4fVvUdoMyOKrW6wwLfKFgXW96cSJj6qwnkWuDiBnU-LZBxbEwI0uBI3hCFSWKgAnXCQ7WTX7Xe4UKNIw2hU2xNjaBJCY1iDI3rKgAAA81NiNdN2NlNfYAkocHGewcYJAhgQUaZb69ARwIIVANUcwokoAAA1LhS4qhDdK4HIIiNntkLLcNlLbLZuQrRKC4Mrd1r0rknRERcJDzZ4AQEYEIHYMGW+IwCLTGRLWJDLXLWLDrUrQQCrRDb8ureHM7drSXLrfreze1doHsIcMcKdgwtttJV0BnBkNUHsAlHDQmQ9gMvTQtOzbhkbDMZsarZufKPHbsAKFNYBDQN1UyIcmDRzA8puXMNtrFsTO0V7RzXhc1ZuuzbXaAGnYMc3WkL+sHbwq-I2B-N8A3e4DWriGMaDSyv5jaoJMRdHWJKQJcKjP+q8PulsCRlndjGWR9Q0uNZNeKuWGdGnR9Xdd9a8FyGfV9QDSukojCIoi+dyAncXeKlpg9nKkakSoveEDHZ0HHSYC-UndNY2LHGncTZnWRvfOsbMXnecgXYA0XcA6XeXdPf1VSC3RaF3RDWPU3VkjjfA13cUEeuDtjRdZg1sHXeov+enQuq1YbXfchsPYjFNSYGPYtVPZXTPdvcHPPcJIvRHCvTaGvSsInHYHyn9ow6-ChjwxMrvVZfvQ0R9aw1I1MCfdQ2fdnhfa9WkNfX9No0YG2n8I-UPbCd8EAyo8UpZmVuBbZpwD4DwPwCgK5fRBtFtNQPdOjDTKVZeXKa9KJG43dAUTIYEx44mJtCCNElAqSBjL9dUS1WevrEDPNWWaEwxQpSvPMqkjGP1sesNp0MesDIuRWE7t+vkwUN+kU6Kv1vjeU3jcFlUzk07hLHUxLI08uU7hNu4sNl04UryMU10P1rIPQHevoMNsM6M-09U07ibeUybeWAM50P1u1OIHqOcPQDCis2IGs4wH8IswUP1tLXU50CRaAPoKjelIpLLYYKAPswPkpMcwUKc+c8CopKpDc3c-1kpJSeU4pF0GlJ0KpH85807tCmkNMM8xc6AIpCCmcwUCC1GcAI86tHiGkC8wC4pGAB89M1GQAKTIuQuvOgC4twu3M4vviiRo3HOEsYtj3nPkvsZcVxbUuotnNQuKRMvEz0tNNRmM0EusvouXNM2dDcsdO8vJSPM0tCuM3ExssMuiSpT8tovsugDpQFCisfRO6pQSvgtdBSvQuquysaslNRlcXIsGv-NqugA8UFCoUxieRoJpOeOJnZ4pQwgArHppBOt7RWYOupM3TuPpMUzYbUV9LusdRBDAo1MBtBPDYl76x3N40xthMZMhAIrYCOvJvpMu5ZOLb9berezDYFs1SJtLkHNO6QAkBeyiBjPguVvVtnyltlvLPKDbOwCQDlNbOVDttNtLkturMACidTXbA7vbfZ-WAAcooBO8i1OxOxQ+cn6wwLjN63AWhD-F7W610ACmQMCtFmQFyKuzm0u6hEm7dCmy7tgmG9ux1LuwC2+UdF61m-dMe1tQDhdFdKu14yQCmRLHpdNP1M+B7EwJdLrZUBGooGYGojdMtZzGLKuxE+RW+EkiLNbS4H+zIWukcGg9eHpcDUzFwyxA4uaV+y617fGWW50Ee6gUDr3ZuWWMR58qRxZSG5QDcpR+WNR8u2gSFGO2Ehw8tVdIR4CYigtRPeh+mqiMJ8kA0lh8cNJ++J5EFUQOvOqBtBzISE0JAorS4GkKx+lTCAWrAW7S4MOtRbPU-cjO8PJftPpwu6AL0KJIzcZUpJNIq1zM2MxyvGZ5QPZ454zd665-6u52LJ58Fj567NzI5wANqa3uDGcB2uBQ7g52dq1iThz0fO26gmc0OpfO2iQAC6okHnXdiXetHtEXxGMIEzVU7GKk9XDXjXTXzXDzFHSbWnk4On+XAAOqPllwlzp5Vz13vjISp7mEUJupp6fJ17rXpVN7B-N9p7N8UmghKHEFootw0qJAADJKT4LzAkDrcUCS3aRoKaIUBHfXRadbe7f7c3AncuPSA3S7TqhIMqOlnLsHdHcNJjfqgTefJrcbc2bLUrpoazGA9tAWcFA1cyx1cqQkwaDuB1BbSSgwb1ca0b3SMBwCKmoVCjNw8teE+E8woawQ9XenzDdxcQ+U+qOZs0AuD8wNJ8zrxrSHdly09lknKyfqIBKu475ERFiacM-LAc+ffgqQq5tfTPDi-eyrL7iG2D21L+v0-8yhXcp4j7I4ccwnJpAy9zIqpbBndlzffExTpVad4sDC+sBPsq-LAU2K+-fXQShprG9A9ad6eu9tCK9nRPcMWveJ0W+2+sD28P2Hl368AoX+aKTEz42nOpLf4rpnR4gyEEAYCR8HzvXORQ-GDe9bLJ+h+wlX7R-1OnWsvx+q66RAA","body":"function f1(x) {\n    x = pair(x, list(2));\n    return x;\n}\n\nfunction f2(x) {\n    function f(e) {\n        e;\n        return x;\n    }\n    return f(x = pair(x, list(2)));\n} "},{"body":"\n\tWhat are the values of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f1(1)"},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f2(1)"},{"body":"\n\twith the original\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"?\n\t  \n\tWhat would the values be with Cy's proposed change to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"?\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tCy also points out that changing\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"\n\tas he proposes does not affect the behavior of the example in part a.\n\tExplain why this is true.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tHow do you think sequences\n\tought to be treated in the lazy evaluator?\n\tDo you like Cy's approach, the approach in the text, or some other\n\tapproach?\n      ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.29","id":"#ex-4.29","child":[{"body":"\n    The approach taken in this section is somewhat unpleasant, because it\n    makes an incompatible change to\n    JavaScript.\n    It might be nicer to implement lazy evaluation as an\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"upward-compatible extension","tag":"#text"}]},{"body":", that is, so that ordinary\n    JavaScript\n    programs will work as before.  We can do this by \n    introducing optional parameter declaration as a new\n      syntactic form inside function\n    declarations to let the user control whether or not arguments are to be\n    delayed.  While we're at it, we may as well also give the user the\n    choice between delaying with and without memoization.  For example, the\n    \n\tdeclaration\n      ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction f(a, b, c, d) {\t\n    parameters(\"strict\", \"lazy\", \"strict\", \"lazy_memo\");\n    $\\ldots$\n}\n      "},{"body":"\n    would define ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":" to be a\n    function\n    of four arguments, where the first and third arguments are evaluated when the\n    function\n    is called, the second argument is delayed, and the fourth argument is both\n    delayed and memoized.\n    \n\tYou can assume that the parameter declaration is always\n\tthe first statement in the body of a function declaration,\n\tand if it is omitted, all parameters are strict.\n\tThus, ordinary function declaration\n\twill produce the same behavior as ordinary JavaScript,\n\twhile adding the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"lazy_memo\""},{"body":"\n\tdeclaration to each parameter of every compound\tfunction\n\twill produce the behavior of the lazy evaluator defined in this section.\n\tDesign and implement the changes required to produce such an extension to\n\tJavaScript. The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" function will\n\ttreat parameter declarations as\tfunction applications, so you need to\n\tmodify ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" to dispatch to your\n\timplementation of the new syntactic form.\n      \n    You must also arrange for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    or ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" to determine when arguments are to be\n    delayed, and to force or delay arguments accordingly, and you must arrange\n    for forcing to memoize or not, as appropriate.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.2.2#footnote-link-1","child":[{"body":"The word ","tag":"#text"},{"tag":"EM","child":[{"body":"thunk","tag":"#text"}]},{"body":" was invented by an informal\n      \n      working group that was discussing the implementation of call-by-name\n      \n      in Algol 60.  They observed that most of the analysis of (\"thinking\n      about\") the expression could be done at compile time; thus, at run\n      time, the expression would already have been \"thunk\" about \n      \n      (Ingerman et al. 1960).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.2.2#footnote-link-2","child":[{"body":"This is analogous to the\n    \n\tforcing of \n      \n    the delayed objects that were introduced in chapter 3 to\n    represent streams.  The critical difference between what we are\n    doing here and what we did in chapter 3 is that we are building\n    delaying and forcing into the evaluator, and thus making this uniform\n    and automatic throughout the language.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.2.2#footnote-link-3","child":[{"body":"Lazy evaluation combined with memoization is sometimes\n    referred to as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-need","tag":"#text"}]},{"body":" argument passing, in contrast to\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-name","tag":"#text"}]},{"body":" argument passing.  \n    \n    (Call-by-name, introduced in\n    \n    Algol 60, is similar to non-memoized lazy\n    evaluation.) As language designers, we can build our evaluator to memoize,\n    not to memoize, or leave this an option for programmers\n    (exercise ","tag":"#text"},{"tag":"REF","body":"4.29","href":"/sicpjs/4.2.2#ex-4.29"},{"body":").  As you might\n    expect from chapter 3, these choices raise issues that become both\n    subtle and confusing in the presence of assignments.  (See\n    exercises ","tag":"#text"},{"tag":"REF","body":"4.25","href":"/sicpjs/4.2.2#ex-4.25"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"4.27","href":"/sicpjs/4.2.2#ex-4.27"},{"body":".)\n    An excellent article by\n    \n    Clinger (1982) attempts to clarify the\n    multiple dimensions of confusion that arise here.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.2.2#footnote-link-4","child":[{"body":"Notice that we also erase the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":" from the thunk once the expression's\n    value has been computed.  This makes no difference in the values returned by\n    the interpreter.  It does help save space, however, because removing the\n    reference from the thunk to the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":" once it is\n    no longer needed allows this structure to be\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"garbage-collected","tag":"#text"}]},{"body":" and its space \n    recycled, as we will discuss in\n    section ","tag":"#text"},{"tag":"REF","body":"5.3","href":"/sicpjs/5.3"},{"body":".\n    ","tag":"#text"},{"tag":"TEXT","id":"#p14","child":[{"body":"\n      Similarly, we could have allowed unneeded environments in the memoized\n      delayed objects of section ","tag":"#text"},{"tag":"REF","body":"3.5.1","href":"/sicpjs/3.5.1"},{"body":"\n      to be garbage-collected, by having\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"memo"},{"body":"\n      do something like\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun = null;"},{"body":"\n      to discard the\n      function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":"\n      (which includes the environment in which the\n      \n\t  lambda expression\n\t  that makes up the tail of the stream\n\t\n      was evaluated) after storing its\n      value.\n    ","tag":"#text"}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/4.2.2#footnote-link-5","child":[{"body":"This exercise demonstrates that the interaction between\n  lazy evaluation and side effects can be very confusing.  This is just what you\n  might expect from the discussion in chapter 3.","tag":"#text"}]}]