[{"id":"/sicpjs/prefaces96","tag":"TITLE","body":"Preface to the Second Edition of SICP, 1996"},{"tag":"EPIGRAPH","child":[{"body":"\n    Is it possible that software is not like anything else, that it\n    is meant to be discarded: that the whole point is to\n    always see it as a soap bubble?\n    ","tag":"#text"}],"author":" Alan J. Perlis"},{"tag":"TEXT","id":"#p1","child":[{"body":"\nThe material in this book has been the basis of MIT's entry-level\ncomputer science subject since 1980.  We had been teaching this\nmaterial for four years when the first edition was published, and\ntwelve more years have elapsed until the appearance of this second\nedition.  We are pleased that our work has been widely adopted and\nincorporated into other texts.  We have seen our students take the\nideas and programs in this book and build them in as the core of new\ncomputer systems and languages.  In literal realization of an ancient\nTalmudic pun, our students have become our builders.  We are lucky to\nhave such capable students and such accomplished builders.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\nIn preparing this edition, we have incorporated hundreds of \nclarifications suggested by our own teaching experience and the\ncomments of colleagues at MIT and elsewhere.  We have redesigned\nmost of the major programming systems in the book, including\nthe generic-arithmetic system, the interpreters, the register-machine\nsimulator, and the compiler; and we have rewritten all the program\nexamples to ensure that any Scheme implementation conforming to\nthe IEEE Scheme standard (IEEE 1990) will be able to run the code.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\nThis edition emphasizes several new themes.  The most important\nof these is the central role played by different approaches to\ndealing with time in computational models: objects with state,\nconcurrent programming, functional programming, lazy evaluation,\nand nondeterministic programming.  We have included new sections on \nconcurrency and nondeterminism, and we have tried to integrate this\ntheme throughout the book.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\nThe first edition of the book closely followed the syllabus of our MIT\none-semester subject.  With all the new material in the second\nedition, it will not be possible to cover everything in a single\nsemester, so the instructor will have to pick and choose.  In our own\nteaching, we sometimes skip the section on logic programming\n(section ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.4"},{"body":"),\nwe have students use the\nregister-machine simulator but we do not cover its implementation \n(section ","tag":"#text"},{"tag":"REF","body":"5.2","href":"/sicpjs/5.2"},{"body":"),\nand we give only a cursory overview of\nthe compiler\n(section ","tag":"#text"},{"tag":"REF","body":"5.5","href":"/sicpjs/5.5"},{"body":").\nEven so, this is still\nan intense course.  Some instructors may wish to cover only the first\nthree or four chapters, leaving the other material for subsequent\ncourses.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\nThe World Wide Web site ","tag":"#text"},{"tag":"LINK","body":"of MIT Press","href":"https://mitpress.mit.edu/sites/default/files/sicp/index.html"},{"body":"\nprovides support for users of this book.\nThis includes programs from the book,\nsample programming assignments, supplementary materials,\nand downloadable implementations of the Scheme dialect of Lisp.\n","tag":"#text"}]},{"tag":"EPIGRAPH","child":[{}],"author":" Harold Abelson and Gerald Jay Sussman"}]